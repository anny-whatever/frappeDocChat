{
  "route": "framework/user/en/guides/app-development/how-to-improve-a-standard-control",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/guides/app-development/how-to-improve-a-standard-control",
  "title": "how-to-improve-a-standard-control",
  "content": "Frappe has a couple of elegant and useful widgets, but some times we need to edit them to add small improvements. This small article will describe how to add new resources to the standard widgets.\n\nLet me explain first our goal:\n\n Add many alternative translations in numerous records and in a lot of doctypes\n\nLook the highlighted sections in the __goal__, we have _many translations_ to add in _many records_ and in _many doctypes_, so, we heave a many of work, so we have a lot to do right?\n\nThe answer for this question is: _-Of course not! Because we know that if one element exists in many records and in many doctypes, this element is the Control or Widget_\n\nSo, what we need do, is improve your goal based on the Control, to reduce our quantity of work.\n\nBut, where will we find this magic element, the control? _-For now, we can look it in the JavaScript sources - let's look now at Github_\n\n Don't worry if you don't understand the code for now, our goal there is simplify our work.\n\nLet's go ahead with the thought!\n\nWe know where we need to make the changes, but how will we dismember which are the controls that are affected by our feature and which aren't ?\n\nWe need to keep in mind, that Control are instance of DocFields and the DocFields have a field that is very important for us in this case, the field that will help us to dismember which are affected by our feature and which aren't is the field options in the DocField.\n\n_-Wait!, we understood that the field options can help us, but, how will it help us?_\n\nGood question, we will define a word to put in the options of the DocFields that we need to include the feature, this world will be Translatable.\n\n If you forget how to customize the options of a field look this article, it can refresh your knowledge.\n\nWell, with the defined word in options of our selected DocFields, now is time to code:\n\n_-At last, we think we would never stop talking!_\n\n frappe.ui.form.ControlData = frappe.ui.form.ControlData.$extend({\n make_input: function(){\n var options = this.df.options;\n if (!options || options!==\"Translatable\"){\n this._super();\n return;\n }\n var me = this;\n $('\\\n \\\n \\\n \\\\\n \\\n ').prependTo(this.input_area);\n this.$input_area = $(this.input_area);\n this.$input = this.$input_area.find('input');\n this.$btn = this.$input_area.find('.dialog-btn');\n this.set_input_attributes();\n this.$input.on(\"focus\", function(){\n me.$btn.toggle(true);\n });\n this.$input.on(\"blur\", function(){\n setTimeout(function(){ me.$btn.toggle(false) }, 500);\n });\n this.input = $this.input.get(0);\n this.has_input = true;\n var me = this;\n this.setup_button();\n },\n setup_button: function(){\n var me = this;\n if (this.only_input){\n this.$btn.remove();\n return;\n }\n this.$btn.on(\"click\", function(){\n var value = me.get_value();\n var options = me.df.options;\n if (value && options && options===\"Translatable\"){\n this.open_dialog();\n }\n });\n },\n open_dialog: function(){\n if (this.frm && !this.frm.is_dirty()) {\n new frappe.ui.form.TranslationSelector({\n doc: doc,\n df: this.doc,\n text: this.value\n });\n }\n }\n });\n\n_-Other letter soup, for my gosh!_\n\nIn fact, it IS a soup of letters, for a newbie, but we are not a beginner.\n\nLet me explain what this code does;\n\nAt line 1 the code overrides the ControlData by one extended Class of itself.\nThe method make_input checks if the docfield is Translatable to make the new Control if not, it calls the original make_input using _super()\nThe method setup_button checks if the docfield is Translatable to enable it show a dialog\nThe method open_dialog invokes a new instance of the TranslationSelector that we will create in the code below.",
  "scrapedAt": "2025-10-22T00:02:28.966Z"
}