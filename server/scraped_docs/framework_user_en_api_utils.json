{
  "route": "framework/user/en/api/utils",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/api/utils",
  "title": "utils",
  "content": "Frappe Framework comes with various utility functions to handle common operations for managing site-specific DateTime management, date and currency formatting, PDF generation, and much more.\n\nThese utility methods can be imported from the frappe.utils module (and its nested modules like frappe.utils.logger and frappe.utils.data) in any Python file of your Frappe App. This list is not at all exhaustive, you can take a peek at the Framework codebase to see what's available.\n\nnow\n\nnow()\n\nReturns the current datetime in the format yyyy-mm-dd hh:mm:ss\n\nfrom frappe.utils import now\n\nnow() # '2021-05-25 06:38:52.242515'\n\ngetdate\n\ngetdate(string_date=None)\n\nConverts string_date (yyyy-mm-dd) to datetime.date object. If no input is provided, current date is returned. Throws an exception if string_date is an invalid date string.\n\nfrom frappe.utils import getdate\n\ngetdate() # datetime.date(2021, 5, 25)\ngetdate('2000-03-18') # datetime.date(2000, 3, 18)\n\ntoday\n\ntoday()\n\nReturns current date in the format yyyy-mm-dd.\n\nfrom frappe.utils import today\n\ntoday() # '2021-05-25'\n\nadd_to_date\n\nadd_to_date(date, years=0, months=0, weeks=0, days=0, hours=0, minutes=0, seconds=0, as_string=False, as_datetime=False)\n\n`date`: A string representation or `datetime` object, uses the current `datetime` if `None` is passed\n`as_string`: Return as string\n`as_datetime`: If `as_string` is True and `as_datetime` is also True, returns a `datetime` string otherwise just the `date` string.\n\nThis function can be quite handy for doing date/datetime deltas, for instance, adding or substracting certain number of days from a particular date/datetime.\n\nfrom datetime import datetime # from python std library\nfrom frappe.utils import add_to_date\n\ntoday = datetime.now().strftime('%Y-%m-%d')\nprint(today) # '2021-05-21'\n\nafter_10_days = add_to_date(datetime.now(), days=10, as_string=True)\nprint(after_10_days) # '2021-05-31'\n\nadd_to_date(datetime.now(), months=2) # datetime.datetime(2021, 7, 21, 15, 31, 18, 119999)\nadd_to_date(datetime.now(), days=10, as_string=True, as_datetime=True) # '2021-05-31 15:30:23.757661'\nadd_to_date(None, years=6) # datetime.datetime(2027, 5, 21, 15, 32, 31, 652089)\n\ndate_diff\n\ndate_diff(date_2, date_1)\n\nReturn the difference between the given two dates in days.\n\nfrom frappe.utils import add_to_date, today, date_diff\ndate_1 = today()\ndate_2 = add_to_date(date_1, days=10)\n\nprint(date_diff(date_2, date_1)) #10\n\ndays_diff\n\ndays_diff(date_2, date_1)\n\nReturn the difference between the given two dates in days.\n\nfrom frappe.utils import add_to_date, today, days_diff\ndate_1 = today()\ndate_2 = add_to_date(date_1, days=10)\n\nprint(days_diff(date_2, date_1)) #10\n\nmonth_diff\n\nmonth_diff(date_2, date_1)\n\nReturn the difference between the given two dates in months.\n\nfrom frappe.utils import add_to_date, month_diff\ndate_1 = \"2024-07-01\"\ndate_2 = add_to_date(date_1, days=60)\n\nprint(month_diff(date_2, date_1)) #2\n\npretty_date\n\npretty_date(iso_datetime)\n\nTakes an ISO time and returns a string representing how long ago the date represents. Very common in communication applications like instant messengers.\n\nfrom frappe.utils import pretty_date, now, add_to_date\n\npretty_date(now()) # 'just now'\n\n# Some example outputs:\n\n# 1 hour ago\n# 20 minutes ago\n# 1 week ago\n# 5 years ago\n\nformat_duration\n\nformat_duration(seconds, hide_days=False)\n\nConverts the given duration value in seconds (float) to duration format.\n\nfrom frappe.utils import format_duration\n\nformat_duration(50) # '50s'\nformat_duration(10000) # '2h 46m 40s'\nformat_duration(1000000) # '11d 13h 46m 40s'\n\n# Convert days to hours\nformat_duration(1000000, hide_days=True) # '277h 46m 40s'\n\ncomma_and\n\ncomma_and(some_list, add_quotes=True)\n\nGiven a list or tuple some_list, returns a string of the format 1st item, 2nd item, .... and last item. This function uses frappe._, so you don't have to worry about the translations for the word and. If add_quotes is False, returns the items without quotes, with quotes otherwise. If the type of some_list passed as an argument is something other than a list or tuple, it (some_list) is returned as it is.\n\nfrom frappe.utils import comma_and\n\ncomma_and([1, 2, 3]) # \"'1', '2' and '3'\"\ncomma_and(['Apple', 'Ball', 'Cat'], add_quotes=False) # 'Apple, Ball and Cat'\ncomma_and('abcd') # 'abcd'\n\n There is also a comma_or function which is similar to comma_and except the separator, which is or in the case of comma_or.\n\nmoney_in_words\n\nmoney_in_words(number, main_currency=None, fraction_currency=None)\n\n`number`: A floating point money amount\n`main_currency`: Uses this as the main currency. If not given, tries to fetch from default settings or uses `INR` if not found there.\n\nThis function returns string in words with currency and fraction currency.\n\nfrom frappe.utils import money_in_words\n\nmoney_in_words(900) # 'INR Nine Hundred and Fifty Paisa only.'\nmoney_in_words(900.50) # 'INR Nine Hundred and Fifty Paisa only.'\nmoney_in_words(900.50, 'USD') # 'USD Nine Hundred and Fifty Centavo only.'\nmoney_in_words(900.50, 'USD', 'Cents') # 'USD Nine Hundred and Fifty Cents only.'\n\nvalidate_json_string\n\nvalidate_json_string(string)\n\nRaises frappe.ValidationError if the given string is a valid JSON (JavaScript Object Notation) string. You can use a try-except block to handle a call to this function as shown the code snippet below.\n\nimport frappe\nfrom frappe.utils import validate_json_string\n\n# No Exception thrown\nvalidate_json_string('[]')\nvalidate_json_string('[{}]')\nvalidate_json_string('[{\"player\": \"one\", \"score\": 199}]')\n\ntry:\n # Throws frappe.ValidationError\n validate_json_string('invalid json')\nexcept frappe.ValidationError:\n print('Not a valid JSON string')\n\nrandom_string\n\nrandom_string(length)\n\nThis function generates a random string containing length number of characters. This can be useful for cryptographic or secret generation for some cases.\n\nfrom frappe.utils import random_string\n\nrandom_string(40) # 'mcrLCrlvkUdkaOe8m5xMI8IwDB8lszwJsWtZFveQ'\nrandom_string(6) # 'htrB4L'\nrandom_string(6) #'HNRirG'\n\nunique\n\nunique(seq)\n\nseq: An iterable / Sequence\n\nThis function returns a list of elements of the given sequence after removing the duplicates. Also, preserves the order, unlike: list(set(seq)).\n\nfrom frappe.utils import unique\n\nunique([1, 2, 3, 1, 1, 1]) # [1, 2, 3]\nunique('abcda') # ['a', 'b', 'c', 'd']\nunique(('Apple', 'Apple', 'Banana', 'Apple')) # ['Apple', 'Banana']\n\nget_pdf\n\nget_pdf(html, options=None, output=None)\n\n`html`: HTML string to render\n`options`: An optional `dict` for configuration\n`output`: A optional `PdfFileWriter` object.\n\nThis function uses pdfkit and pyPDF2 modules to generate PDF files from HTML. If output is provided, appends the generated pages to this object and returns it, otherwise returns a byte stream of the PDF.\n\nFor instance, generating and returning a PDF as response to a web request:\n\nimport frappe\nfrom frappe.utils.pdf import get_pdf\n\n@frappe.whitelist(allow_guest=True)\ndef generate_invoice():\n cart = [{\n 'Samsung Galaxy S20': 10,\n 'iPhone 13': 80\n }]\n\n html = '<h1>Invoice from Star Electronics e-Store!</h1>'\n\n # Add items to PDF HTML\n html += '<ol>'\n for item, qty in cart.items():\n html += f'<li>{item} - {qty}</li>'\n html += '</ol>'\n\n # Attaching PDF to response\n frappe.local.response.filename = 'invoice.pdf'\n frappe.local.response.filecontent = get_pdf(html)\n frappe.local.response.type = 'pdf'\n\nget_abbr\n\nget_abbr(string, max_len=2)\n\nReturns an abbrivated (initials only) version of the given string with a maximum of max_len letters. It is extensively used in Frappe Framework and ERPNext to generate thumbnail or placeholder images.\n\nfrom frappe.utils import get_abbr\n\nget_abbr('Gavin') # 'G'\nget_abbr('Coca Cola Company') # 'CC'\nget_abbr('Mohammad Hussain Nagaria', max_len=3) # 'MHN'\n\nvalidate_url\n\nvalidate_url(txt, throw=False, valid_schemes=None)\n\n`txt`: A string to check validity\n`throw`: Weather to throw an exception if `txt` does not represent a valid URL, `False` by default\n`valid_schemes`: A string or an iterable (list, tuple or set). If provided, checks the given URL's scheme against this.\n\nThis utility function can be used to check if a string represents a valid URL address.\n\nfrom frappe.utils import validate_url\n\nvalidate_url('google') # False\nvalidate_url('https://google.com') # True\nvalidate_url('https://google.com', throw=True) # throws ValidationError\n\nvalidate_email_address\n\nvalidate_email_address(email_str, throw=False)\n\nReturns a string containing the email address or comma-separated list of valid email addresses present in the given email_str. If throw is True, frappe.InvalidEmailAddressError is thrown in case of no valid email address in present in the given string else an empty string is returned.\n\nfrom frappe.utils import validate_email_address\n\n# Single valid email address\nvalidate_email_address('rushabh@erpnext.com') # 'rushabh@erpnext.com'\nvalidate_email_address('other text, rushabh@erpnext.com, some other text') # 'rushabh@erpnext.com'\n\n# Multiple valid email address\nvalidate_email_address(\n 'some text, rushabh@erpnext.com, some other text, faris@erpnext.com, yet another no-emailic phrase.'\n) # 'rushabh@erpnext.com, faris@erpnext.com'\n\n# Invalid email address\nvalidate_email_address('some other text') # ''\n\nvalidate_phone_number\n\nvalidate_phone_number(phone_number, throw=False)\n\nReturns True if phone_number (string) is a valid phone number. If phone_number is invalid and throw is True, frappe.InvalidPhoneNumberError is thrown.\n\nfrom frappe.utils import validate_phone_number\n\n# Valid phone numbers\nvalidate_phone_number('753858375') # True\nvalidate_phone_number('+91-75385837') # True\n\n# Invalid phone numbers\nvalidate_phone_number('invalid') # False\nvalidate_phone_number('87345%%', throw=True) # InvalidPhoneNumberError\n\nfrappe.cache()\n\ncache()\n\nReturns the redis connection, which is an instance of class RedisWrapper which is inherited from the redis.Redis class. You can use this connection to use the Redis cache to store/retrieve key-value pairs.\n\nimport frappe\n\ncache = frappe.cache()\n\ncache.set('name', 'frappe') # True\ncache.get('name') # b'frappe'\n\nfrappe.sendmail()\n\nsendmail(recipients=[], sender=\"\", subject=\"No Subject\", message=\"No Message\", as_markdown=False, template=None, args=None, **kwargs)\n\n`recipients`: List of recipients\n`sender`: Email sender. Default is current user or default outgoing account\n`subject`: Email Subject\n`message`: (or `content`) Email Content\n`as_markdown`: Convert content markdown to HTML\n`template`: Name of html template (jinja) from templates/emails folder\n`args`: Arguments for rendering the template\n\nFor most cases, the above arguments are sufficient but there are many other keyword arguments that can be passed to this function. To see all the keyword arguments, please have a look the implementation of this function (frappe/__init__.py).\n\nThis function can be used to send email using user's default Email Account or global default Email Account.\n\nimport frappe\n\nrecipients = [\n 'gavin@erpnext.com',\n 'hussain@erpnext.com'\n]\n\nfrappe.sendmail(\n recipients=recipients,\n subject=frappe._('Birthday Reminder'),\n template='birthday_reminder',\n args=dict(\n reminder_text=reminder_text,\n birthday_persons=birthday_persons,\n message=message,\n ),\n header=_('Birthday Reminder 🎂')\n)\n\nSample Jinja template file:\n\n<!-- templates/emails/birthday_reminder.html -->\n<div>\n<div class=\"gray-container text-center\">\n<div>\n {% for person in birthday_persons %}\n {% if person.image %}\n <img src=\"{{ person.image }}\" title=\"{{ person.name }}\"/>\n {% endif %}\n {% endfor %}\n </div>\n<div style=\"margin-top: 15px;\">\n<span>{{ reminder_text }}</span>\n<p class=\"text-muted\">{{ message }}</p>\n</div>\n</div>\n\nAttaching Files\n\nYou can easily attach files to your email by passing a list of attachments to the sendmail function:\n\nfrappe.sendmail(\n [\"faris@frappe.io\", \"hussain@frappe.io\"],\n message=\"## hello, *bro*\"\n attachments=[{\"file_url\": \"/files/hello.png\"}],\n as_markdown=True\n)\n\nNotice how attachments are a list of dictionaries having a key file_url. You can find this file_url in a File document's file_url field.\n\nfilelock\n\nFile lock can be used to synchronize processes to avoid race conditions.\n\nExample: Writing to a file can cause race condition if multiple writers are trying to write to a file. So we create a named lock so processes can see the lock and wait until it's avialable for writing.\n\nfrom frappe.utils.synchronization import filelock\n\ndef update_important_config(config, file):\n with filelock(\"config_name\"):\n json.dumps(config, file)",
  "scrapedAt": "2025-10-22T00:01:46.321Z"
}