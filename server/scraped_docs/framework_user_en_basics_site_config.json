{
  "route": "framework/user/en/basics/site_config",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/basics/site_config",
  "title": "site_config",
  "content": "Frappe sites can share the same application server, each behind different database solutions, configurations and locations, with different granularities via the Site Config in Bench.\n\nThe Site Config stores all site-related information, from the site's Database details to the custom domains that point to it. Through the Site Configuration, we can define the key, value pairs that may change the behaviour of Frappe and your Frappe Apps.\n\nSite Config\n\nsite_config.json stores the global configuration for a particular site and is present in the site directory. The file is created and populated automatically by Frappe. As this depends on Frappe, the default settings or behaviour may also change depending on any updates.\n\n{\n \"db_name\": \"frappe_database_name\",\n \"db_password\": \"frappe_database_password\",\n \"admin_password\": \"admin_password\",\n}\n\n Note: This file is considered to contain important information related to a site's state and could prove troublesome in case of loss of config files or corruption. It is backed up periodically along with the database backups in vanilla setups.\n\nCommon Site Config\n\ncommon_site_config.json stores configuration shared by your bench. Actions performed at the Bench level are generally related to this config. The config keys defined may be used to alter behaviour of bench level operations or impact all the sites on your bench, considering the config value precedence.\n\nThis file is automatically generated and managed by the Bench CLI. Changes in this file may affect change in the behaviour of your Frappe setups depending on your system settings and Bench CLI's version.\n\n{\n \"background_workers\": 1,\n \"developer_mode\": true,\n \"dns_multitenant\": true,\n \"file_watcher_port\": 6789,\n \"frappe_user\": \"frappe\",\n \"gunicorn_workers\": 2,\n \"maintenance_mode\": 0,\n \"pause_scheduler\": 0,\n \"redis_cache\": \"redis://localhost:13000\",\n \"redis_cache_sentinel_enabled\": 1,\n \"redis_cache_sentinels\": [\n \"redis-cache-sentinel-1:26379\",\n \"redis-cache-sentinel-2:26379\"\n ],\n \"redis_cache_sentinel_password\": \"sentinelpassword\",\n \"redis_cache_master_service\": \"mymaster\",\n \"redis_cache_master_password\": \"masterpassword\",\n \"redis_queue\": \"redis://localhost:11000\",\n \"redis_queue_sentinel_enabled\": 1,\n \"redis_queue_sentinels\": [\n \"redis-queue-sentinel-1:26379\",\n \"redis-queue-sentinel-2:26379\"\n ],\n \"redis_queue_sentinel_password\": \"sentinelpassword\",\n \"redis_queue_master_service\": \"mymaster\",\n \"redis_queue_master_password\": \"masterpassword\",\n \"redis_socketio\": \"redis://localhost:12000\",\n \"scheduler_tick_interval\": 120,\n \"serve_default_site\": true,\n \"socketio_port\": 9000,\n \"webserver_port\": 8000,\n \"root_password\": \"MARIADB_PASSWORD\",\n \"live_reload\": true\n}\n\nOptional Settings\n\n \n \n\n \n \n\n workers\n Allows creating custom workers. The background_workers param is optional, if not set the general background_workers will be used. Example: \"workers\": { \"custom_worker1\": { \"timeout\": 5000, \"background_workers\": 4 } }. Regenerate config and restart processes to take effect.\n\n redis_cache_sentinel_enabled\n If set to 1 connects to Redis sentinel in production setup\n\n redis_cache_sentinels\n Array of sentinel servers host/ip and ports\n\n redis_cache_sentinel_password\n Password to connect to sentinels\n\n redis_cache_master_service\n Master service to connect to\n\n redis_cache_master_password\n Redis master server password\n\n redis_queue_sentinel_enabled\n If set to 1 connects to Redis sentinel in production setup\n\n redis_queue_sentinels\n Array of sentinel servers host/ip and ports\n\n redis_queue_sentinel_password\n Password to connect to sentinels\n\n redis_queue_master_service\n Master service to connect to\n\n redis_queue_master_password\n Redis master server password\n\nApart from this, you can set any keys you wish to be available for all sites.\n\nConfig Value Precedence\n\nThe value for a particular key being set in the site_config.json will have precedence over the value defined in the common_site_config.json. This means the key-values defined in the common config may be used as a fallback in some cases.\n\nImagine you want to enable the Frappe Web Logger on all the sites on your bench, except one worker.frappe.xyz because let's assume it's a very high activity site and you just don't need to be flooded with a lot of information at once. You can set enable_frappe_logger as true in the common_site_config.json and set it to false in worker.frappe.xyz's site_config.json.\n\n$ bench config set-common-config -c enable_frappe_logger true\n$ bench --site worker.frappe.xyz set-config enable_frappe_logger false\n\nSimilarly, it is possible to have a single application server to support a number of sites, each having a different database solutions provider or location. If you choose to move all the sites on your bench to another database server, the switch may be as little as updating the values in the common_site_config.json of your bench.\n\nStandard Config Keys\n\nThese are some of the standard keys utilised by Frappe Framework and Bench.\n\nMandatory Settings\n\nThese keys are set in the site_config.json and are generated automatically unless the values are provided during site creation.\n\n \n \n\n \n \n\n db_type\n Database Type. Options include \"mariadb\" and \"postgres\".\n\n db_name\n Database Name (also used as the default database user name).\n\n db_password\n Database password.\n\nOptional Settings\n\n \n \n\n \n \n\n admin_password\n Default Password for the standard \"Administrator\" User. This will be used as the password for the Administrator User for all new sites.\n\n allow_tests\n Setting this allows tests to be run on this site.\n\n allow_cors\n Enables cross-site HTTP requests. Can be set to: - a specific origin, for example: \"https://example.com\" - a list of origins, for example: [\"https://portal.example.com\", \"https://shop.example.com\"] - a wildcard: \"*\" (Not recommended for production use)\n\n allowed_referrers\n The domains mentioned here will be allowed to bypass CSRF if they are the referer or origin for a request\n\n backup_encryption_key\n Key used to encrypt/decrypt backups\n\n data_import_batch_size\n Batch Size for Data Import\n\n db_user\n From v16 onwards, specify a separate DB user name\n\n deny_multiple_logins\n Stop users from having more than one active session.\n\n deny_multiple_sessions\n Deny Multiple Sessions.\n\n developer_mode\n If developer mode is set, DocType changes are automatically updated in files.\n\n disable_async\n Disables socket.io client; the client stops polling the socket.io server.\n\n disable_error_snapshot\n Disable Error Snapshot.\n\n disable_global_search\n Disable Global Search.\n\n disable_scheduler\n Disable Scheduler\n\n disable_session_cache\n Disable Session Cache.\n\n disable_website_cache\n Disable Website Cache.\n\n encryption_key\n Key used to encrypt Passwords. This password is created automatically on a fresh site. Upon site restore, this key will have to be restored as well to be able to use existing passwords.\n\n enable_frappe_logger\n If set, logs basic info from the requests and saves them under ./sites/{site}/logs/frappe.web.log.\n\n error_report_email\n Set the default Error Report Email.\n\n ignore_csrf\n Ignore CSRF.\n\n install_apps\n Mention the list of apps to install at site restore, reinstall and on new creations.\n\n host_name\n The host name his is required for background jobs and print to correctly identify the site URL. The value should include protocol and port (if non-default), without a trailing slash. For example: \"https://erp.example.org:2424\"\n\n http_port\n Change the HTTP port for your Frappe Setup.\n\n keep_backups_for_hours\n Utilized in frappe.utils.new_backup to pass through frappe.utils.delete_temp_backups. It retains the backup files depending on their age in hours.\n\n local_infile\n Set Flag to allow Data from local infile for MySQL connections.\n\n logging\n Utilise frappe.debug_log via frappe.log to enable different levels of logging. At level 2, shows queries and results run at every action.\n\n maintenance_mode\n Enable maintenance mode.\n\n max_file_size\n Max file size allowed for file uploads. Default is 10MiB.\n\n max_reports_per_user\n Maximum number of Auto Email Reports which can be created by a user, default is 3.\n\n monitor\n If set, logs all requests and saves under ./logs/monitor.json.log. Check out monitoring under the Debugging documentation.\n\n mute_emails\n Stops email sending if true.\n\n pause_scheduler\n Pause Scheduler\n\n rate_limit\n Specify Rate Limits using frappe.rate_limiter. Check out the document reference rate limiting.\n\n robots_txt\n Path to robots.txt file to be rendered when going to frappe-site.com/robots.txt\n\n root_login\n Database root username.\n\n root_password\n Database root password.\n\n server_script_enabled\n Enable/Disable Server Script.\n\n skip_setup_wizard\n Skip Setup Wizard.\n\n socketio_port\n Specify Socket.IO Port.\n\n webserver_port\n Generally used as fallback for conf key http_port.\n\n app_include_js\n Inject JavaScript script by URL in /app. Must be a list of absolute URLs.\n\n app_include_css\n Inject CSS Stylesheet by URL in /app. Must be a list of absolute URLs.\n\n disable_transaction_log\n Disable creation of Transaction Log for Sales Invoice and Payment Entry (ERPNext Regional Feature).\n\nRemote Database Host Settings\n\nTo connect to a remote database server using SSL, you must first configure the database host to accept SSL connections. An example of how to do this is available at this tutorial by Digital Ocean. After you do the configuration, set the following three options. All options must be set for Frappe to attempt to connect using SSL.\n\n \n \n\n \n \n\n db_host\n Database host if not localhost.\n\n db_port\n Specify port for your database.\n\n db_ssl_ca\n Full path to the ca.pem file used for connecting to a database host using ssl. Example value is \"/etc/mysql/ssl/ca.pem\".\n\n db_ssl_cert\n Full path to the cert.pem file used for connecting to a database host using ssl. Example value is \"/etc/mysql/ssl/client-cert.pem\".\n\n db_ssl_key\n Full path to the key.pem file used for connecting to a database host using ssl. Example value is \"/etc/mysql/ssl/client-key.pem\".\n\n rds_db\n Grant certain privileges instead of all, while setting up a Site's database. Used in db_manager.py.\n\nReplica Read Only Database Host Settings\n\nGuide to setup read operations from secondary MariaDB server in a replica setup is available at in the user guides.\n\n \n \n\n \n \n\n read_from_replica\n To enable disable read from replica. Acceptable values are 1/0 or true/false.\n\n different_credentials_for_replica\n If database credentials are different on replica then set 1 else 0\n\n replica_host\n IP address for repica\n\n replica_db_name\n Replica DB name\n\n replica_db_password\n Replica DB password\n\nDefault Outgoing Email Settings\n\nSome of the available lower level configurations for Frappe's Email module.\n\n \n \n\n \n \n\n auto_email_id\n If set, this will be the default email for outgoing mails.\n\n mail_login\n is used as the second preference and \"notifications@example.com\" is used as fallback.\n\n always_use_account_email_id_as_sender\n Use Account Email ID As Sender.\n\n always_use_account_name_as_sender_name\n Use Account Name as Sender Name\n\n email_sender_name\n Email Sender Name.\n\n mail_server\n SMTP server hostname.\n\n mail_port\n STMP port.\n\n mail_login\n Login id for SMTP server.\n\n mail_password\n Password for SMTP server.\n\n pop_timeout\n POP Timeout.\n\n use_ssl\n Connect via SSL.\n\n use_tls\n Connect via TLS.\n\nBench Configuration\n\nThese configurations are utilised by the Bench CLI and may be set differently for each bench on your system through the common site configuration.\n\n \n \n\n \n \n\n restart_supervisor_on_update\n Restart supervisord on bench update\n\n restart_systemd_on_update\n Restart systemd on bench update\n\n release_bench\n If set, the current bench will be treated purely as a tool for performing releases.\n\n background_workers\n Number of workers allocated for handling the background jobs.\n\n dns_multitenant\n If set, turns on DNS multitenany for Bench. Used during NGINX conf generations.\n\n file_watcher_port\n Port number for the File Watcher\n\n frappe_user\n The user under which the current Bench was created.\n\n gunicorn_workers\n Number of Gunicorn workers. Default minimum value is 2.\n\n gunicorn_max_requests\n Number of requests after gunicorn workers will be restarted. Default value is 5000.\n\n maintenance_mode\n If set, takes sites offline and stops all background processes and scheduled jobs. Used during site migrations and bench update operations.\n\n pause_scheduler\n If set, pauses the scheduler for the specified sites.\n\n redis_cache\n Port number for the redis cache process defined in the Bench Procfile.\n\n redis_queue\n Port number for the redis queue process defined in the Bench Procfile.\n\n redis_socketio\n Port number for the redis Socket.IO process defined in the Bench Procfile.\n\n scheduler_tick_interval\n Job Scheduler runs a loop that enqueues all scheduled jobs pending execution once every scheduler_tick_interval seconds. This makes it possible to set the minimum frequency for scheduling jobs. Defaults to 60.\n\n socketio_port\n Port number for the Socket.IO process defined in the Bench Procfile.\n\n webserver_port\n Port number for the Frappe web server.\n\n live_reload\n Automatically reload Desk when assets are rebuilt.\n\nIntegrations\n\nSome third party integrations may require lower level configurations you may want to define for all the sites on your bench, if you're a service provider. Frappe let's you define these config settings for your integrations via the site config.\n\nSandbox\n\n \n \n\n \n \n\n sandbox_api_key\n Sandbox API Key\n\n sandbox_api_secret\n Sandbox API Secret\n\n sandbox_api_password\n Sandbox API Password\n\n sandbox_api_username\n Sandbox API Username\n\n sandbox_publishable_key\n Sandbox Publishable Key\n\n sandbox_signature\n Sandbox Signature\n\nDropBox\n\n \n \n\n \n \n\n dropbox_access_key\n Dropbox Access Key\n\n dropbox_broker_site\n Dropbox Broker Site\n\n dropbox_secret_key\n Dropbox Secret Key\n\nPayPal\n\n \n \n\n \n \n\n paypal_username\n Paypal Username\n\n paypal_password\n PayPal Password\n\n paypal_signature\n Paypal Signature\n\nOthers\n\n \n \n\n \n \n\n google_analytics_id\n Google Analytics ID\n\n converted_rupee_to_paisa\n Converted Rupee To Paisa for RazorPay Settings\n\nExternally extending config\n\nSometimes people may not want to have the values for configs like db password directly hardcoded in the site config JSON. In this case, after the site is setup normally, you can install a custom app that is allowed to extend the site configuration by returning a dict of whatever values you wish to append/overwrite. The app can fetch these however desired, but something with very low latency is preferred as it'll have to run for every request to the site.\n\nIt can be configured as such (to be done after initial site setup + installation of app)\n\n{\n \"extra_config\": \"vault.vault.conf_hook\"\n}\n\nor if you have multiple\n\n{\n \"extra_config\": [\"vault.vault.conf_hook1\", \"vault.vault.conf_hook2\"]\n}\n\nAn example of the method in a custom app would be\n\ndef conf_hook() -> dict:\n password = get_password()\n return {\"db_password\": password}\n\nOverriding from environment\n\nCertain config values can be overridden via environment variables.\n\nThe priority is environment -> site config -> default value (if Frappe has one configured)\n\n \n \n\n Config\n Environment Variable\n\n redis_queue\n FRAPPE_REDIS_QUEUE\n\n redis_cache\n FRAPPE_REDIS_CACHE\n\n db_type\n FRAPPE_DB_TYPE\n\n db_socket\n FRAPPE_DB_SOCKET\n\n db_host\n FRAPPE_DB_HOST\n\n db_port\n FRAPPE_DB_PORT\n\n db_user\n FRAPPE_DB_USER\n\n db_name\n FRAPPE_DB_NAME\n\n db_password\n FRAPPE_DB_PASSWORD",
  "scrapedAt": "2025-10-22T00:01:22.820Z"
}