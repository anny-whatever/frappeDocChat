{
  "route": "framework/user/en/basics/asset-bundling",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/basics/asset-bundling",
  "title": "asset-bundling",
  "content": "A guide to understanding how static asset bundling works in Frappe Framework.\n\nFrappe ships with a Rich Admin UI accessible at /app which is an SPA written\nin modern JavaScript syntax and styling which is written in SASS (.scss)\nfiles. These files are not directly understandable by the browser and hence need\nto be compiled before they are sent to the browser to parse and execute.\n\nFrappe ships with an asset bundler that can compile client side assets like:\n\n.js (Modern syntax with import and export)\n.ts (TypeScript files)\n.vue (Vue single file components)\n.css (CSS processed using PostCSS)\n.scss (SASS files)\n.sass (SASS files with indentation syntax)\n.styl (Stylus files)\n.less (Less files)\n\nThese files are compiled to .js or .css depending on the type and are sent\nto the browser.\n\nBuilding assets\n\nTo compile assets using the asset bundler, you run the following command from\nthe frappe-bench folder:\n\n$ bench build\n\nYou can also run it for specific apps by giving it the --apps option.\n\n# build only frappe assets\n$ bench build --apps frappe\n\n# build only frappe and erpnext assets\n$ bench build --apps frappe,erpnext\n\nWatch mode\n\nWhen you are working with bundled files you need the build command to run every\ntime you make a change to your source files. The asset bundler comes with a\nwatch mode where it will listen to changes in the file system and rebuild\nwhenever a file changes.\n\nRunning the following command will start a long-running process that watches\nyour files and rebuilds them as they change. It will log a line with the text\n\"Compiled changes...\" every time it does a rebuild.\n\n$ bench watch\nWatching for changes...\n1:17:28 PM: Compiled changes...\n\nYou can also run it for specific apps by giving it the --apps option.\n\n# watch only erpnext assets\n$ bench watch --apps erpnext\n\nStarting with Version 14, Desk will be automatically reloaded if assets get rebuilt in watch mode. This behavior can be toggled by setting the LIVE_RELOAD environment variable, or changing the value for live_reload in common_site_config.json.\n\nBundle files\n\nA bundle file is an entry point of an asset that is picked up by the bundler for\ncompilation. For e.g., if there is a file named main.bundle.js in the public\nfolder of your app it will be automatically picked up by the bundler and\ncompiled at /assets/[app]/dist/js/main.bundle.[hash].js. A unique hash\ncomputed from the contents of the output is also appended to the file name which\nis useful for cache-busting in browsers.\n\nSimilarly, if there is a file named style.bundle.scss in the public folder, it\nwill be compiled to /assets/[app]/dist/css/style.bundle.css. Notice, the\nextension changed from .scss to .css because browsers can understand CSS\nfiles but not SASS files. Bundle files can exist at any nesting level in the\npublic folder, but they will always be compiled in either dist/js or\ndist/css depending upon their type. This means if there is a file at\npublic/main.bundle.js and another file at public/src/main.bundle.js the\ncompiled output of the latter will override. The bundler will also print a\nwarning for such collisions.\n\nSome more examples of bundle inputs and their outputs:\n\n Input\n Output\n\n [app]/public/main.bundle.js\n /assets/dist/[app]/js/main.bundle.[hash].js\n\n [app]/public/src/main.bundle.js\n /assets/dist/[app]/js/main.bundle.[hash].js\n\n [app]/public/src/utils/utils.bundle.js\n /assets/dist/[app]/js/utils.bundle.[hash].js\n\n [app]/public/main.bundle.ts\n /assets/dist/[app]/js/main.bundle.[hash].js\n\n [app]/public/main.bundle.css\n /assets/dist/[app]/css/main.bundle.[hash].css\n\n [app]/public/styles/main.bundle.css\n /assets/dist/[app]/css/main.bundle.[hash].css\n\n [app]/public/main.bundle.scss\n /assets/dist/[app]/css/main.bundle.[hash].css\n\n [app]/public/main.bundle.sass\n /assets/dist/[app]/css/main.bundle.[hash].css\n\n [app]/public/main.bundle.styl\n /assets/dist/[app]/css/main.bundle.[hash].css\n\n [app]/public/main.bundle.less\n /assets/dist/[app]/css/main.bundle.[hash].css\n\nImporting libraries from npm\n\nIf you are familiar with modern web development, you might need to install\n3rd-party libraries from npm and use it in your project.\n\nLet's say you want to use the dayjs library for working with Date and Time in\nyour app. You first install it using yarn by running the following command\nfrom the root of your apps folder.\n\n$ cd frappe-bench/apps/myapp\n$ yarn add dayjs\n\nNow, you can import it in your source files like so:\n\nmyapp/public/main.bundle.js\n\nimport * as dayjs from 'dayjs';\n\nconsole.log(dayjs())\n\nIncluding bundled assets in HTML\n\nWhen a bundle file is compiled, the output file contains a unique hash. So, you\ncannot hardcode the path of the file because the next time you make a change to\nthat file the hash will change. Frappe provides a couple of helpers to do this.\n\nIncluding assets in custom HTML files\n\nThe Jinja methods include_script and include_style will output the correct\npath of the file including the HTML markup for .js and .css files respectively.\n\nindex.html\n\nMy App\n\n {{ include_style('style.bundle.css') }}\n\n {{ include_script('main.bundle.js') }}\n\nindex.html (Rendered)\n\nMy App\n\n <script type=\"text/javascript\" src=\"/assets/myapp/dist/js/main.bundle.BYJXV4LB.js\"></script>\n\nIncluding assets in app.html\n\nIf you want to include bundled assets from your app in /app you can use the\napp_include_js and app_include_css to load them into app.html.\n\n[app]/hooks.py\n\napp_include_js = ['main.bundle.js']\napp_include_css = ['style.bundle.css']\n\nGet bundled asset path\n\nIf for some reason you need only the path of the bundled asset, you can use the\nbundled_asset Jinja method to generate it.\n\nJinja\n\n{{ bundled_asset('main.bundle.js') }}\n\nRendered\n\n/assets/myapp/dist/js/main.bundle.BYJXV4LB.js\n\nPython API\n\nThese APIs are also available in python. You can import them from jinja_globals.py.\n\nfrom frappe.utils.jinja_globals import bundled_asset, include_script, include_style\n\nbundled_asset('main.bundle.js')\n\nIncluding bundled assets lazily in /app\n\nIf you want to lazy load bundled assets inside the Admin UI (/app) you can\nuse the frappe.require method.\n\nfrappe.require('main.bundle.js').then(() => {\n // main.bundle.js is now loaded\n})\n\nThis approach is useful when you want to load your code based on some condition.\nThe first page load won't be impacted and is better for performance.\n\nProduction Mode\n\nWhen deploying your app to production, you can build your assets in production\nmode. In this mode, the bundler will minify the final output of your bundle\nwhich results in smaller file sizes.\n\nTo build your assets in production mode, run the following command:\n\n$ bench build --production",
  "scrapedAt": "2025-10-22T00:01:20.583Z"
}