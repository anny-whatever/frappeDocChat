{
  "route": "framework/user/en/api/form",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/api/form",
  "title": "form",
  "content": "Form Scripts lets you add client side logic to your Forms. You can write Form Scripts for automatically fetching values, adding validation or adding contextual actions to your Form.\n\nStandard Form Scripts\n\nWhen you create a new DocType, a {doctype}.js is created where you can write your form script.\n\nSyntax:\n\nfrappe.ui.form.on(doctype, {\n event1() {\n // handle event 1\n },\n event2() {\n // handle event 2\n }\n})\n\nFor example, todo.js which is located at frappe/desk/doctype/todo/todo.js may look like this:\n\n// Script for ToDo Form\nfrappe.ui.form.on('ToDo', {\n // on refresh event\n refresh(frm) {\n // if reference_type and reference_name are set,\n // add a custom button to go to the reference form\n if (frm.doc.reference_type &amp;&amp; frm.doc.reference_name) {\n frm.add_custom_button(__(frm.doc.reference_name), () => {\n frappe.set_route(\"Form\", frm.doc.reference_type, frm.doc.reference_name);\n });\n }\n }\n})\n\nChild Table Scripts\n\nChild Table Scripts should be written in the same file as their parent.\n\nfrappe.ui.form.on('Quotation', {\n // ...\n})\n\nfrappe.ui.form.on('Quotation Item', {\n // cdt is Child DocType name i.e Quotation Item\n // cdn is the row name for e.g bbfcb8da6a\n item_code(frm, cdt, cdn) {\n let row = frappe.get_doc(cdt, cdn);\n }\n})\n\nCustom Form Scripts\n\nYou can also write form scripts by creating Client Script in the system. You should write Client Scripts if the logic is specific to your site. If you want to share Form Scripts across sites, you must include them via Apps.\n\nTo create a new Client Script, go to\n\nHome > Customization > Client Script > New\n\n New Client Script for Form\n\nForm Events\n\nForm Scripts depend on events to trigger. Here are the list of all Form Events that are triggered by Form.\n\nThese events will get frm as the first parameter in their handler functions.\n\nfrappe.ui.form.on('ToDo', {\n // frm passed as the first parameter\n setup(frm) {\n // write setup code\n }\n})\n\n Event Name\n Description\n\n setup\n Triggered once when the form is created for the first time\n\n before_load\n Triggered before the form is about to load\n\n onload\n Triggered when the form is loaded and is about to render\n\n refresh\n Triggered when the form is loaded and rendered.\n\n onload_post_render\n Triggered after the form is loaded and rendered\n\n validate\n Triggered before before_save\n\n before_save\n Triggered before save is called\n\n after_save\n Triggered after form is saved\n\n before_submit\n Triggered before submit is called\n\n on_submit\n Triggered after form is submitted\n\n before_cancel\n Triggered before cancel is called\n\n after_cancel\n Triggered after form is cancelled\n\n before_discard\n Triggered before discard is called\n\n after_discard\n Triggered after form is discarded\n\n timeline_refresh\n Triggered after form timeline is rendered\n\n {fieldname}_on_form_rendered\n Triggered when a row is opened as a form in a Table field\n\n {fieldname}\n Triggered when the value of fieldname is changed\n\n get_email_recipient_filters\n Called by the email dialog to fetch default filters for email recipients. Should accept two parameters frm (the current form) and field (\"recipients\", \"cc\" or \"bcc\"), and return an array or dict of filters (related to the Contact doctype).\n\n get_email_recipients\n Called by the email dialog to fetch default recipients. Should accept two parameters frm (the current form) and field (\"recipients\", \"cc\" or \"bcc\"), and return a list of email addresses for this field.\n\nChild Table Events\n\nThese events are triggered in the context of a Child Table. Hence, along with frm, they will also get the cdt (Child DocType) and cdn (Child Docname) parameters in their handler functions.\n\nImagine our \"ToDo\" DocType has a field called \"links\" that contains a Child Table. This Child Table is defined in a DocType called \"Dynamic Link\". We want our code to run whenever a row is added to the table.\n\n// this code is located inside `todo.js`\n\nfrappe.ui.form.on('Dynamic Link', { // The child table is defined in a DoctType called \"Dynamic Link\"\n links_add(frm, cdt, cdn) { // \"links\" is the name of the table field in ToDo, \"_add\" is the event\n // frm: current ToDo form\n // cdt: child DocType 'Dynamic Link'\n // cdn: child docname (something like 'a6dfk76')\n // cdt and cdn are useful for identifying which row triggered this event\n\n frappe.msgprint('A row has been added to the links table ðŸŽ‰ ');\n }\n});\n\n Event Name\n Description\n\n before_{fieldname}_remove\n Triggered when a row is about to be removed from a Table field\n\n {fieldname}_add\n Triggered when a row is added to a Table field\n\n {fieldname}_remove\n Triggered when a row is removed from a Table field\n\n {fieldname}_move\n Triggered when a row is reordered to another location in a Table field\n\n form_render\n Triggered when a row is opened as a form in a Table field\n\n Note: The first three events listed in the above table, before_{fieldname}_remove, {fieldname}_add and {fieldname}_remove, are triggered for fields of fieldtype Table MultiSelect also. (Version 16 onwards)\n\nForm API\n\nHere are a list of common methods that are available on the frm object.\n\nfrm.set_value\n\nSet the value of a field. This will trigger the field change event in the form.\n\n// set a single value\nfrm.set_value('description', 'New description')\n\n// set multiple values at once\nfrm.set_value({\n status: 'Open',\n description: 'New description'\n})\n\n// returns a promise\nfrm.set_value('description', 'New description')\n .then(() => {\n // do something after value is set\n })\n\nfrm.refresh\n\nRefresh the form with the latest values from the server. Will trigger before_load, onload, refresh, timeline_refresh and onload_post_render.\n\nfrm.refresh();\n\nfrm.save\n\nTrigger form save. Will trigger validate, before_save, after_save, timeline_refresh and refresh.\n\nIt can be used to trigger other save actions like Submit, Cancel and Update. In that case, the relevant events will be triggered.\n\n// save form\nfrm.save();\n\n// submit form\nfrm.save('Submit');\n\n// cancel form\nfrm.save('Cancel');\n\n// update form (after submit)\nfrm.save('Update');\n\n// all methods returns a promise\n\nfrm.enable_save / frm.disable_save\n\nMethods to enable / disable the Save button in the form.\n\nif (frappe.user_roles.includes('Custom Role')) {\n frm.enable_save();\n} else {\n frm.disable_save();\n}\n\nfrm.email_doc\n\nOpen Email dialog for this form.\n\n// open email dialog\nfrm.email_doc();\n\n// open email dialog with some message\nfrm.email_doc(`Hello ${frm.doc.customer_name}`);\n\nfrm.reload_doc\n\nReload document with the latest values from the server and call frm.refresh().\n\nfrm.reload_doc();\n\nfrm.refresh_field\n\nRefresh the field and it's dependencies.\n\nfrm.refresh_field('description');\n\nfrm.is_dirty\n\nCheck if form values has been changed and is not saved yet.\n\nif (frm.is_dirty()) {\n frappe.show_alert('Please save form before attaching a file')\n}\n\nfrm.dirty\n\nSet form as \"dirty\". This is used to set form as dirty when document values are changed. This triggers the \"Not Saved\" indicator in the Form Views.\n\nfrm.doc.browser_data = navigator.appVersion;\nfrm.dirty();\nfrm.save();\n\nCalling save without setting the form dirty will trigger a \"No changes in document\" toast.\n\nfrm.is_new\n\nCheck if the form is new and is not saved yet.\n\n// add custom button only if form is not new\nif (!frm.is_new()) {\n frm.add_custom_button('Click me', () => console.log('Clicked custom button'))\n}\n\nfrm.set_intro\n\nSet intro text on the top of the form. The function takes two parameters: message (string, required) and color (string, optional).\n\nColor can be 'blue', 'red', 'orange', 'green' or 'yellow'. Default is blue.\n\nif (!frm.doc.description) {\n frm.set_intro('Please set the value of description', 'blue');\n}\n\n Intro Text Example\n\nfrm.add_custom_button\n\nAdd a custom button in the inner toolbar of the page. Alias to page.add_inner_button.\n\n// Custom buttons\nfrm.add_custom_button('Open Reference form', () => {\n frappe.set_route('Form', frm.doc.reference_type, frm.doc.reference_name);\n})\n\n// Custom buttons in groups\nfrm.add_custom_button('Closed', () => {\n frm.doc.status = 'Closed'\n}, 'Set Status');\n\nfrm.change_custom_button_type\n\nChange a specific custom button type by label (and group).\n\n// change type of ungrouped button\nfrm.change_custom_button_type('Open Reference form', null, 'primary');\n\n// change type of a button in a group\nfrm.change_custom_button_type('Closed', 'Set Status', 'danger');\n\nfrm.remove_custom_button\n\nRemove a specific custom button by label (and group).\n\n// remove custom button\nfrm.remove_custom_button('Open Reference form');\n\n// remove custom button in a group\nfrm.remove_custom_button('Closed', 'Set Status');\n\nfrm.clear_custom_buttons\n\nRemove all custom buttons from the inner toolbar.\n\nfrm.clear_custom_buttons();\n\nfrm.set_df_property\n\nChange the docfield property of a field and refresh the field.\n\n// change the fieldtype of description field to Text\nfrm.set_df_property('description', 'fieldtype', 'Text');\n\n// set the options of the status field to only be [Open, Closed]\nfrm.set_df_property('status', 'options', ['Open', 'Closed'])\n\n// set a field as mandatory\nfrm.set_df_property('title', 'reqd', 1)\n\n// set a field as read only\nfrm.set_df_property('status', 'read_only', 1)\n\nfrm.toggle_enable\n\nToggle a field or list of fields as read_only based on a condition.\n\n// set status and priority as read_only\n// if user does not have System Manager role\nlet is_allowed = frappe.user_roles.includes('System Manager');\nfrm.toggle_enable(['status', 'priority'], is_allowed);\n\nfrm.toggle_reqd\n\nToggle a field or list of fields as mandatory (reqd) based on a condition.\n\n// set priority as mandatory\n// if status is Open\nfrm.toggle_reqd('priority', frm.doc.status === 'Open');\n\nfrm.toggle_display\n\nShow/hide a field or list of fields based on a condition.\n\n// show priority and due_date field\n// if status is Open\nfrm.toggle_display(['priority', 'due_date'], frm.doc.status === 'Open');\n\nfrm.set_query\n\nApply filters on a Link field to show limited records to choose from. You must call frm.set_query very early in the form lifecycle, usually in setup or onload.\n\n// show only customers whose territory is set to India\nfrm.set_query('customer', () => {\n return {\n filters: {\n territory: 'India'\n }\n }\n})\n\n// show customers whose territory is any of India, Nepal, Japan\nfrm.set_query('customer', () => {\n return {\n filters: {\n territory: ['in', ['India', 'Nepal', 'Japan']]\n }\n }\n})\n\n// set filters for Link field item_code in\n// items field which is a Child Table\nfrm.set_query('item_code', 'items', () => {\n return {\n filters: {\n item_group: 'Products'\n }\n }\n})\n\nYou can also override the filter method and provide your own custom method on the server side. Just the set the query to the module path of your python method.\n\n// change the filter method by passing a custom method\nfrm.set_query('fieldname', () => {\n return {\n query: 'dotted.path.to.custom.custom_query',\n filters: {\n field1: 'value1'\n }\n }\n})\n\n# python method signature\ndef custom_query(doctype, txt, searchfield, start, page_len, filters):\n # your logic\n return filtered_list\n\nfrm.add_child\n\nAdd a row with values to a Table field.\n\nlet row = frm.add_child('items', {\n item_code: 'Tennis Racket',\n qty: 2\n});\n\nfrm.refresh_field('items');\n\nfrm.call\n\nCall a server side controller method with arguments.\n\n Note: While accessing any server side method using frm.call(), you need to whitelist such method using the @frappe.whitelist decorator.\n\nFor the following controller code:\n\nclass ToDo(Document):\n @frappe.whitelist()\n def get_linked_doc(self, throw_if_missing=False):\n if not frappe.db.exists(self.reference_type, self.reference_name):\n if throw_if_missing:\n frappe.throw('Linked document not found')\n\n return frappe.get_doc(self.reference_type, self.reference_name)\n\nYou can call it from client using frm.call.\n\nfrm.call('get_linked_doc', { throw_if_missing: true })\n .then(r => {\n if (r.message) {\n let linked_doc = r.message;\n // do something with linked_doc\n }\n })\n\nfrm.trigger\n\nTrigger any form event explicitly.\n\nfrappe.ui.form.on('ToDo', {\n refresh(frm) {\n frm.trigger('set_mandatory_fields');\n },\n\n set_mandatory_fields(frm) {\n frm.toggle_reqd('priority', frm.doc.status === 'Open');\n }\n})\n\nfrm.get_selected\n\nGet selected rows in Child Tables in an object where key is the table fieldname and values are row names.\n\nlet selected = frm.get_selected()\nconsole.log(selected)\n// {\n// items: [\"bbfcb8da6a\", \"b1f1a43233\"]\n// taxes: [\"036ab9452a\"]\n// }\n\nfrm.ignore_doctypes_on_cancel_all\n\nTo avoid cancellation of linked documents during cancel all, you need to set the frm.ignored_doctypes_on_cancel_all property with an array of DocTypes of linked documents.\n\nfrappe.ui.form.on(\"DocType 1\", {\n onload: function(frm) {\n // Ignore cancellation for all linked documents of respective DocTypes.\n frm.ignore_doctypes_on_cancel_all = [\"DocType 2\", \"DocType 3\"];\n }\n}\n\nIn the above example, the system will avoid cancellation for all documents of 'DocType 2' and 'DocType 3' which are linked with document of 'DocType 1' during cancellation.",
  "scrapedAt": "2025-10-22T00:01:58.401Z"
}