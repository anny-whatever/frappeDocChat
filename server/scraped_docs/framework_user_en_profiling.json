{
  "route": "framework/user/en/profiling",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/profiling",
  "title": "Recorder - SQL profiler",
  "content": "Recorder - SQL profiler\n\nFrappe Recorder is a profiling tool built into the Frappe framework designed to capture all requests and background jobs, along with the SQL queries executed, corresponding stack traces.\n\nExample use case: You've noticed that a certain DocType is taking too much time to save and you believe that SQL queries might be a bottleneck. In such a case starting recorder and then submitting your document will give you complete capture of all the queries that were fired for saving the document.\n\nLogin as Administrator. Open Recorder from Awesomebar and click on \"Start\".\nYou'll be asked to configure recording. Pick appropriate options and start recording. \nPerform the actions you want to profile (preferably in another tab.)\nOnce you've captured enough information, go to the recorder again and stop recording.\n\nYou will now see a list of all the requests or jobs that were processed and recorded. You can sort them by various columns to identify problematic requests.\n\n \n\nClick on a row to open the request for extra information. Following information is available in the capture:\n\npath - requested path or job name e.g. /app\ncmd - dotted path to the method (empty for background jobs).\ntime - time at which request was created.\nduration - duration for completing the request (see implementation note below).\nnumber of queries - Number of SQL queries executed for fulfilling the request.\nTime in queries - Time taken in SQL queries.\nRequest headers - HTTP headers received with the request (empty for background jobs).\nForm Dict - form data received with the request (empty for background jobs).\nSQL queries - table of all SQL queries that ran.\n\n \n\nTo know more about a particular query click on row to expand additional information. This includes the duration of the query, stack trace and SQL's EXPLAIN output for that query.\n\n \n\n Implementation note: Recorder adds sizable overhead for capturing the details, hence overall duration is not representative of real-world performance. Query time however is very close to real-world performance.\n\nImporting & Exporting Frappe Recorder Captures\n\nYou can export recorder captures and import them on another site for further analysis.\n\nGo to recorder page. Once you've recorded click on the Menu (three dots) > Export.\nThis will download a JSON file containing captured data. To view this on another site you can click on Import and select the JSON file to view the captured data.\n\nPython profiling using Recorder\n\nIn addition to capturing SQL queries, the recorder can also run the inbuilt Python profiler \"cProfile\" to give you profiling output of running Python functions. You can enable this option while starting the recorder.\n\n \n\n If you enable cProfiler in recorder it will add even higher overhead during recording. Make sure to disable it immdiately after debugging. You can also filter the request/jobs to avoid hindering production traffic.\n\nProfiling functions using bench\n\nBench's execute command runs a dotted path to method and it also supports profiling.\n\n▶ bench --site [sitename] --profile execute erpnext.projects.doctype.task.task.set_tasks_as_overdue\n\nYou should be able to run most commands you can run via console with execute now, including db methods.\n\n▶ bench --site [sitename] execute frappe.db.get_database_size\n6784\n\nFrappe Monitor\n\nMonitor logs request and job metadata. To enable this feature set \"monitor\": 1 in your site config.\n\nCollected data is buffered in redis cache and periodically moved to monitor.json.log file in logs directory with a scheduled job frappe.monitor.flush.\n\n{\n \"duration\": 807142,\n \"request\": {\n \"ip\": \"127.0.0.1\",\n \"method\": \"GET\",\n \"path\": \"/api/method/frappe.realtime.get_user_info\",\n \"response_length\": 9687,\n \"status_code\": 500\n },\n \"site\": \"frappe.local\",\n \"timestamp\": \"2020-03-05 09:37:17.397884\",\n \"transaction_type\": \"request\",\n \"uuid\": \"83be6a4c-27a1-497a-9ce6-c815bca4e420\"\n}\n\n{\n \"duration\": 1364,\n \"job\": {\n \"method\": \"frappe.ping\",\n \"scheduled\": false,\n \"wait\": 90204\n },\n \"site\": \"frappe.local\",\n \"timestamp\": \"2020-03-05 09:37:40.124682\",\n \"transaction_type\": \"job\",\n \"uuid\": \"8225ab76-8bee-462c-b9fc-a556406b1ee7\"\n}\n\nBackground Jobs monitoring\n\nFrappe uses RQ (Redis Queue) for asynchronously executing long tasks in background. You can monitor RQ using these inbuilt virtual doctypes:\n\n1. RQ Worker - Monitoring a background worker\n\nRQ worker doctype shows all background workers consuming the background jobs queue on your site. It also contrains basic statistics about the worker like name, timing, successful and failed jobs count and currently status.\n\n2. RQ Job - Monitoring and controlling background jobs.\n\nRQ Job is a virtual doctype which provides information about all background jobs. You can filter jobs by queue and status.\n\n \n\nForm view of RQ job shows all information about the job.\n\n \n\nDebugging Stuck Process\n\nIf you believe any worker process is stuck you can send SIGUSR1 signal to it and it will print the current stack of all of its threads to stderr.\n\nExample: kill -SIGUSR1 <PID>\n\nIn typical deployments, you can find output written to stderr in log files:\n\nWeb workers - bench/logs/web.error.log\nBackground workers - bench/logs/worker.error.log\nScheduler - bench/logs/schedule.error.log\n\nMonitoring General Health of Services\n\n\"System Health Report\" can be used to quickly check system health. This includes, but not limited to:\n\nBackground Jobs\nScheduler\nDatabase\nCache\nEmails\nError logs\nStorage\nBackups\nUsers\n\nSearch \"System Health Report\" in Awesomebar to view this report.",
  "scrapedAt": "2025-10-22T00:04:47.272Z"
}