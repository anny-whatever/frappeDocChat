{
  "route": "framework/user/en/guides/app-development/overriding-link-query-by-custom-script",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/guides/app-development/overriding-link-query-by-custom-script",
  "title": "overriding-link-query-by-custom-script",
  "content": "You can override the standard link query by using set_query via the Client Script DocType from the desk.\n\nThe set_query method takes one of two formats: set_query(field_name, options_function()) for regular fields, or set_query(field_name, child_table_name, options_function()) for fields in child tables.\n\n1. Adding Filters\n\nYou can add filters to the query:\n\nfrappe.ui.form.on(\"Bank Reconciliation\", \"onload\", function(frm) {\n frm.set_query(\"bank_account\", function() {\n return {\n \"filters\": {\n \"account_type\": \"Bank\",\n \"group_or_ledger\": \"Ledger\"\n }\n };\n });\n});\n\nA more complex query:\n\nfrappe.ui.form.on(\"Bank Reconciliation\", \"onload\", function(frm){\n frm.set_query(\"bank_account\", function(){\n return {\n \"filters\": [\n [\"Bank Account\", \"account_type\", \"=\", \"Bank\"],\n [\"Bank Account\", \"group_or_ledger\", \"!=\", \"Group\"]\n ]\n }\n });\n});\n\n2. Calling a Different Method to Generate Results\n\nYou can also set a server side method to be called on the query:\n\nfrm.set_query(\"item_code\", \"items\", function() {\n return {\n query: \"erpnext.controllers.queries.item_query\",\n filters: frm.doc.enquiry_type === \"Maintenance\" ?\n {\"is_service_item\": \"Yes\"} : {\"is_sales_item\": \"Yes\"}\n };\n});\n\nCustom Method\n\nThe custom method should return a list of items for auto select. If you want to send additional data, you can send multiple columns in the list.\n\nParameters to the custom method are:\n\ndef custom_query(doctype, txt, searchfield, start, page_len, filters)\n\nExample:\n\n# searches for leads which are not converted\n@frappe.whitelist()\n@frappe.validate_and_sanitize_search_inputs\ndef lead_query(doctype, txt, searchfield, start, page_len, filters):\n return frappe.db.sql(\"\"\"\n SELECT name, lead_name, company_name\n FROM `tabLead`\n WHERE docstatus < 2\n AND ifnull(status, '') != 'Converted'\n AND ({key} LIKE %(txt)s\n OR lead_name LIKE %(txt)s\n OR company_name LIKE %(txt)s)\n {mcond}\n ORDER BY\n IF(LOCATE(%(_txt)s, name), LOCATE(%(_txt)s, name), 99999),\n IF(LOCATE(%(_txt)s, lead_name), LOCATE(%(_txt)s, lead_name), 99999),\n IF(LOCATE(%(_txt)s, company_name), LOCATE(%(_txt)s, company_name), 99999),\n name, lead_name\n LIMIT %(start)s, %(page_len)s\n \"\"\".format(**{\n 'key': searchfield,\n 'mcond':get_match_cond(doctype)\n }), {\n 'txt': \"%{}%\".format(txt),\n '_txt': txt.replace(\"%\", \"\"),\n 'start': start,\n 'page_len': page_len\n })\n\nNote: @frappe.whitelist() is used to expose lead_query to the client-side\nand @frappe.validate_and_sanitize_search_inputs decorator is used to validate and sanitize user inputs sent through API or client-side request to avoid possible SQLi.\n\nFor more examples see:\n\nhttps://github.com/frappe/erpnext/blob/develop/erpnext/controllers/queries.py",
  "scrapedAt": "2025-10-22T00:02:34.575Z"
}