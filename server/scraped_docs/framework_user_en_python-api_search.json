{
  "route": "framework/user/en/python-api/search",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/python-api/search",
  "title": "search",
  "content": "Searching in Frappe is managed by the Search module. It is a wrapper for Whoosh a full text search library written in Python.\n\nYou can extend the FullTextSearch class to create a search class for a specific requirement. For example the WebsiteSearch is a wrapper for indexing public facing web pages and exposing a search.\n\nThe FullTextSearch class\n\nEach FullTextSearch (FTS) instance holds a Schema defined by the class itself. That means, a specific FTS implementation will have it's specific schema. You can create a new implementation if you wish to index with a different schema. Along with this the FTS class has other controllers to facilitate creating, updating and querying the index.\n\nExtending the FTS class\n\nWhen initializing a FTS based class, you need to provide an index name. On instantiation, the following params are initialized\n- index_name: name of the index provided.\n- index_path: path of the index in the sites folder\n- schema: return by the get_schema function\n- id: id used to recognize the document in the index\n\nOnce instantiated you can run the build function. It gets all the documents from get_items_to_index, the documents are a list of frappe._dict (frappe dicts) conforming to the defined schema. These documents are then added to the index and written to the file.\n\nYou can search the index using the search method of the FTS class. These functions are documented in the API reference here.\n\nAn example implementation for blog will look like the following:\n\nclass BlogWrapper(FullTextSearch):\n # Default Schema\n # def get_schema(self):\n # return Schema(name=ID(stored=True), content=TEXT(stored=True))\n\n # def get_id(self):\n # return \"name\"\n\n def get_items_to_index(self):\n docs = []\n for blog_name in get_all_blogs():\n docs.append(get_document_to_index(blog_name))\n return docs\n\n def get_document_to_index(self, name):\n blog = frappe.get_doc(\"Blog Post\", name)\n return frappe._dict(name=name, content=blog.content)\n\n def parse_result(self, result):\n return result[\"name\"]\n\nget_items_to_index: Get all routes to be indexed, this includes the static pages in www/ and routes from published documents\nget_document_to_index: Render a page and parse it using BeautifulSoup\nparse_result: all the search results are parsed using this function",
  "scrapedAt": "2025-10-22T00:01:48.527Z"
}