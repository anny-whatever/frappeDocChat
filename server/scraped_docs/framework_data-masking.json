{
  "route": "framework/data-masking",
  "sourceUrl": "https://docs.frappe.io/framework/data-masking",
  "title": "data-masking",
  "content": "Note: This feature is only available in nightly (v16) version. This feature is considered experimental.\n\nIn the Frappe Framework, permissions can be applied to control field visibility using Perm Levels. \n\nHowever, in many business scenarios, it's important to show certain fields while hiding their sensitive data. For example: \n\nHR users might need to view employee details but should not see salary amounts. \nSupport staff may see customer phone numbers in a masked format like 811XXXXXXX.\nFinance users can view bank account fields without exposing the full account number. \n\nThis is where Data Masking comes in. \n\nWith Data Masking, you can configure specific fields to display masked or hidden values based on the user's roles and permissions — without restricting field visibility.\nIt ensures sensitive information remains protected while keeping the user interface consistent and informative.\n\nEnabling Data Masking\n\nData Masking can be enabled directly from the Doctype or through the Customize Form.\n\nSteps to Enable Data Masking\n\nOpen the Doctype (in Developer Mode) or Customize Form where you want to enable masking. \nSelect the field you want to mask. \nCheck the Mask checkbox. \nSave and reload the form.\n\nOnce enabled, users who do not have the Mask permission for that field will see masked or hidden data, while users with the appropriate permission will see the actual value.\n\nHere's a quick demo showing how to enable Data Masking:\n\nSupported Field Types\n\nData Masking can be applied only on the following field types:\n\nSelect, Read Only, Phone, Percent, Password, Link, Int, Float,\nDynamic Link, Duration, Datetime, Currency, Data, and Date.\n\nFor Developers\n\nData Masking in the Frappe Framework works seamlessly with the existing permission system.\nWhen a user doesn’t have the required Mask permission for a field, the framework automatically replaces the actual value with a masked version both in the UI and backend responses.\n\nHow It Works Internally\n\nField Configuration\nEach field can have a mask property enabled in its DocField.\n{\n \"fieldname\": \"phone_number\",\n \"fieldtype\": \"Data\",\n \"options\": \"Phone\",\n \"mask\": 1\n}\n\nPermission Check\nThe system checks if the current user has the mask permission for that field using:\nmeta.has_permlevel_access_to(fieldname=df.fieldname, df=df, permission_type=\"mask\")\n\nAutomatic Masking in Responses\nOnce the permission check fails, the framework automatically masks the field value before returning it.\nThis applies to:\n\nForm view data loading\nList view queries\nReports using ORM or standard data fetching\nAPI responses (e.g. /api/resource/..., /api/method/...)\n\n Note: Data Masking does not apply automatically to custom SQL queries or Query Reports that use raw SQL.\n In such cases, developers need to explicitly apply masking logic in their query results before returning the response.",
  "scrapedAt": "2025-10-22T00:01:39.513Z"
}