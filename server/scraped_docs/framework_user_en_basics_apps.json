{
  "route": "framework/user/en/basics/apps",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/basics/apps",
  "title": "A Frappe app is a python package that uses the Frappe framework. Frappe apps live",
  "content": "A Frappe app is a python package that uses the Frappe framework. Frappe apps live\nin a directory called apps in the frappe-bench directory.\n\nThe default app frappe is a frappe app which acts as the framework for all\napps. A Frappe app should have an entry in apps.txt.\n\nCreating an App\n\nFrappe ships with a boilerplate for a new app. To create a new app, run the\nfollowing command from the frappe-bench directory.\n\n$ bench new-app custom_app\nINFO:bench.app:creating new app custom_app\nApp Title (default: Custom App):\nApp Description: Custom Frappe App\nApp Publisher: John Doe\nApp Email: custom@johndoe.com\nApp Icon (default 'octicon octicon-file-directory'):\nApp Color (default 'grey'):\nApp License (default 'MIT'):\n'custom_app' created at /Users/johndoe/frappe-bench/apps/custom_app\nINFO:bench.app:installing custom_app\nINFO:bench.utils:./env/bin/pip install -q -e ./apps/custom_app\n\nThe custom_app directory will now be created in the apps directory. It will\nalso be added to apps.txt.\n\nDirectory structure\n\nThe directory structure of the app will look something like this:\n\napps/custom_app\n├── MANIFEST.in\n├── README.md\n├── custom_app\n│ ├── __init__.py\n│ ├── config\n│ │ ├── __init__.py\n│ │ ├── desktop.py\n│ │ └── docs.py\n│ ├── custom_app\n│ │ └── __init__.py\n│ ├── hooks.py\n│ ├── modules.txt\n│ ├── patches.txt\n│ ├── public\n│ │ ├── css\n│ │ └── js\n│ ├── templates\n│ │ ├── __init__.py\n│ │ └── includes\n│ └── www\n├── license.txt\n├── requirements.txt\n├── dev-requirements.txt\n├── package.json\n└── setup.py\n\nrequirements.txt\n\nThis file stores the list of python dependencies. When this app is installed,\nit's dependencies will also get installed.\n\ndev-requirements.txt [Optional]\n\nThis file stores the list of python development dependencies. Syntax of this\nfile is same as requirements.txt. If developer mode is enabled, then\ninstalling the app will also install its development dependencies.\n\npackage.json\n\nThis file is used to keep track of node dependencies. Learn more about it\nhere.\n\ncustom_app\n\nThis is the directory where the source files are stored.\n\ncustom_app/custom_app\n\nWhen you create a new app, a module with the same name is also created within\nthe app. This is the directory which corresponds to that module.\n\ncustom_app/hooks.py\n\nThis file is used to hook into frappe events and extend or override standard\nbehaviour by frappe.\n\nLearn more about hooks.\n\ncustom_app/modules.txt\n\nEvery frappe app is organized into different modules. Every DocType is part of a\nmodule. These modules are listed in this file.\n\nLearn more about modules.\n\ncustom_app/patches.txt\n\nThis file is used to store references to patches that run in database migrations.\nThese patches are run in order, and they are run only once.\n\nLearn more about Database Migrations.\n\ncustom_app/public\n\nThe public folder is a static folder and can be served by nginx in production.\nFiles put here can be accessed via the url /assets/custom_app/**/*.\n\nFor example, the file public/img/logo.png is accessible via the url\n/assets/custom_app/img/logo.png.\n\nThis folder is used to store static assets used directly in the client side like\nJS, CSS and Images.\n\ncustom_app/templates\n\nThe templates folder is used to write and manage Jinja Templates. They can be\norganized in any way you want. This directory is directly scanned when you use\nthem in Jinja templates.\n\nFor example, when you include a partial {% include \"templates/navbar/navbar.html\" %},\nit will first scan this directory and then fallback to other apps.\n\ncustom_app/www\n\nFiles in this directory are directly mapped to portal pages and the URLs match the\ndirectory structure.\n\nLearn more about portal pages.\n\nInstalling an app into a site\n\nTo use an app, it must be installed on a site. Installing an app on a site means\ncreating the models that are bundled with the app into the site, which means\ncreating database tables in the site database.\n\nTo install an app onto a site, run the following command:\n\n$ bench --site site_name install-app custom_app\n\nInstalling custom_app...\n\nTo check whether the app was installed correctly, run the following command:\n\n$ bench --site site_name list-apps\nfrappe\ncustom_app",
  "scrapedAt": "2025-10-22T00:01:16.114Z"
}