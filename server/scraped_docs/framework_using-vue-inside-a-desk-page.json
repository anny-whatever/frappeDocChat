{
  "route": "framework/using-vue-inside-a-desk-page",
  "sourceUrl": "https://docs.frappe.io/framework/using-vue-inside-a-desk-page",
  "title": "Using Vue to add pages to your Desk based app gives you a best-of-both-worlds type of convenience:",
  "content": "Using Vue to add pages to your Desk based app gives you a best-of-both-worlds type of convenience:\n\nYou get to use Vue with its reactivity and composability\nYou get to use Frappe JS APIs\n\nThis is possible without having to manually configure a Vue app. You can follow\nthe steps below to set it up.\n\nCreate a Page\n\nNavigate to the Page DocType (at /app/page) and create a new Page entry.\nNew files will be created for your page in the module you select.\n\nCheck created files\n\nUnder the module folder in your app's directory, you'll find a new folder with three\nfiles in it:\n\n└── app\n └── app\n └── module\n └── page\n └── test_vue\n ├── __init__.py\n ├── test_vue.json\n └── test_vue.js\n\nAmong these, in the newly created JavaScript file you'll see make_app_page being called:\n\nfrappe.pages['test-vue'].on_page_load = function (wrapper) {\n var page = frappe.ui.make_app_page({\n parent: wrapper,\n title: 'None',\n single_column: true,\n });\n};\n\nThis is used to create a new page. See the Page API for more info.\n\nThis file will be loaded when you visit to /app/test-vue, you can visit the\npath and an empty page with the title \"None\" will be shown.\n\nCreating Vue files\n\nTo use Vue, your .vue source files need to be transpiled and bundled. Frappe\nFramework does this out of the box.\n\nWe'll now create two files, a .vue file, and a .js file that loads your Vue\ncode. You can add these files under your app's public/js folder:\n\n└── app\n └── app\n └── public\n └── test_vue\n ├── TestVue.vue\n └── test_vue.bundle.js\n\nFirst, we'll create the .vue file TestVue.vue. Some simple Vue code to test the setup:\n\n<script setup>\nimport { ref } from 'vue';\n\nconst message = ref('Hello, World');\n</script>\n<template>\n <h1>{{ message }}</h1>\n</template>\n\nSecond, the .js file that loads the Vue code:\n\nimport { createApp } from 'vue';\nimport TestVue from './TestVue.vue';\n\n// A simple function to mount your Vue app\nfunction setup_vue(wrapper) {\n const app = createApp(TestVue);\n app.mount(wrapper.get(0));\n return app;\n}\n\n// We'll call this function from the generated test_vue.js file\nfrappe.ui.setup_vue = setup_vue;\nexport default setup_vue;\n\nRequire the bundle\n\nIn the generated test_vue.js file, add the following code to load the Vue app:\n\nfrappe.pages['test-vue'].on_page_load = function (wrapper) {\n const page = frappe.ui.make_app_page({\n parent: wrapper,\n title: 'Test Vue',\n single_column: true,\n });\n\n // hot reload when in developer mode\n if (frappe.boot.developer_mode) {\n frappe.hot_update ??= frappe.hot_update;\n frappe.hot_update.push(() => load_vue(wrapper));\n }\n};\nfrappe.pages['test-vue'].on_page_show = (wrapper) => load_vue(wrapper);\n\n// Simple callback function to load Vue in the page\nasync function load_vue(wrapper) {\n const $parent = $(wrapper).find('.layout-main-section');\n $parent.empty();\n\n // Require the bundle and mount the Vue app\n await frappe.require('test_vue.bundle.js');\n frappe.test_vue_app = frappe.ui.setup_vue($parent);\n}\n\nThis will call the load_vue function that requires the bundle and mounts the\nVue app when the page is loaded or shown.\n\nBuild or run the dev server\n\nTo build your code you can call:\n\nbench build\n\nNote: this will build the frontend code for all the apps on your bench.\n\nTo run the dev server you can navigate the frappe app's (i.e bench/apps/frappe) folder and run:\n\nnpm run build -- --apps app --watch\n\nThis will watch for any changes in your app and rebuild the code, which should\ntrigger a hot reload in your browser.\n\nIf you've done everything right you should see your page show the Vue app's message:",
  "scrapedAt": "2025-10-22T00:03:41.849Z"
}