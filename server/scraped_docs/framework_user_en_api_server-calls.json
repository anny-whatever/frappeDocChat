{
  "route": "framework/user/en/api/server-calls",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/api/server-calls",
  "title": "frappe.call",
  "content": "frappe.call\n\nfrappe.call(method, args)\n\nMakes an AJAX request to the server, where the method which is the dotted path\nto a whitelisted Python method, is executed and it's return value is sent as the\nresponse.\n\n// call with no parameters\nfrappe.call('ping')\n .then(r => {\n console.log(r)\n // {message: \"pong\"}\n })\n\n// call with a single parameter\nfrappe.call('frappe.core.doctype.user.user.get_role_profile', {\n role_profile: 'Test'\n}).then(r => {\n console.log(r.message)\n})\n\n// call with all options\nfrappe.call({\n method: 'frappe.core.doctype.user.user.get_role_profile',\n args: {\n role_profile: 'Test'\n },\n // disable the button until the request is completed\n btn: $('.primary-action'),\n // freeze the screen until the request is completed\n freeze: true,\n callback: (r) => {\n // on success\n },\n error: (r) => {\n // on error\n }\n})\n\nfrappe.db.get_doc\n\nfrappe.db.get_doc(doctype, name, filters)\n\nReturns the Document object of doctype and name. If name is not provided,\ngets the first document matched by filters.\n\n// get doc by name\nfrappe.db.get_doc('Task', 'TASK00002')\n .then(doc => {\n console.log(doc)\n })\n\n// get doc by filters\nfrappe.db.get_doc('Task', null, { status: 'Open' })\n .then(doc => {\n console.log(doc)\n })\n\nfrappe.db.get_list\n\nfrappe.db.get_list(doctype, { fields, filters })\n\nReturns a list of records of doctype with fields and filters.\n\nfrappe.db.get_list('Task', {\n fields: ['subject', 'description'],\n filters: {\n status: 'Open'\n }\n}).then(records => {\n console.log(records);\n})\n\nfrappe.db.get_value\n\nfrappe.db.get_value(doctype, name, fieldname)\n\nReturns a document's field value or a list of values.\n\n// single value\nfrappe.db.get_value('Task', 'TASK00004', 'status')\n .then(r => {\n console.log(r.message.status) // Open\n })\n\n// multiple values\nfrappe.db.get_value('Task', 'TASK00004', ['status', 'subject'])\n .then(r => {\n let values = r.message;\n console.log(values.status, values.subject)\n })\n\n// using filters\nfrappe.db.get_value('Task', {status: 'Open'}, 'subject')\n .then(r => {\n let values = r.message;\n console.log(values.subject)\n })\n\nfrappe.db.get\\single\\value\n\nfrappe.db.get_single_value(doctype, field)\n\nReturns a field value from a Single DocType.\n\nfrappe.db.get_single_value('System Settings', 'time_zone')\n .then(time_zone => {\n console.log(time_zone);\n })\n\nfrappe.db.set_value\n\nfrappe.db.set_value(doctype, docname, fieldname, value, callback)\n\nSets a document's property using frappe.get_doc and doc.save on server.\n\n// update a field's value\nfrappe.db.set_value('Task', 'TASK00004', 'status', 'Open')\n .then(r => {\n let doc = r.message;\n console.log(doc);\n })\n\n// update multiple fields\nfrappe.db.set_value('Task', 'TASK00004', {\n status: 'Working',\n priority: 'Medium'\n}).then(r => {\n let doc = r.message;\n console.log(doc);\n})\n\nfrappe.db.insert\n\nfrappe.db.insert(doc)\n\nInsert a new document.\n\nfrappe.db.insert({\n doctype: 'Task',\n subject: 'New Task'\n}).then(doc => {\n console.log(doc);\n})\n\nfrappe.db.count\n\nfrappe.db.count(doctype, filters)\n\nReturns number of records for a given doctype and filters.\n\n// total number of Task records\nfrappe.db.count('Task')\n .then(count => {\n console.log(count)\n })\n\n// total number of Open Tasks\nfrappe.db.count('Task', { status: 'Open' })\n .then(count => {\n console.log(count)\n })\n\nfrappe.db.delete_doc\n\nfrappe.db.delete_doc(doctype, name)\n\nDelete a document identified by doctype and name.\n\nfrappe.db.delete_doc('Task', 'TASK00004')\n\nfrappe.db.exists\n\nfrappe.db.exists(doctype, name)\n\nReturns true if a document record exists.\n\nfrappe.db.exists('Task', 'TASK00004')\n .then(exists => {\n console.log(exists) // true\n })",
  "scrapedAt": "2025-10-22T00:02:08.518Z"
}