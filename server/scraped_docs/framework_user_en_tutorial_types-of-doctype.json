{
  "route": "framework/user/en/tutorial/types-of-doctype",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/tutorial/types-of-doctype",
  "title": "Let's learn about the different types of doctype in the framework by creating",
  "content": "Let's learn about the different types of doctype in the framework by creating\nmore doctypes.\n\nLibrary Membership\n\nLet's create another doctype: Library Membership. It will have the following\nfields:\n\nLibrary Member (Link, Mandatory)\nFull Name (Data, Read Only)\nFrom Date (Date)\nTo Date (Date)\nPaid (Check)\n\nIt will have Is Submittable enabled. It will have Naming set as\nLMS.##### and restricted to Librarian role. Also, the Title Field should\nbe set to full_name in the View Settings section.\n\nThe Link field Library Member is similar to a Foreign Key column in other\nframeworks. It will let you link the value to a record in another DocType. In\nthis case, it links to a record of Library Member DocType.\n\nThe Full Name field is a Read Only field that will be automatically fetched\nfrom from the full_name field in the linked record Library Member.\n\nNow, go to the Library Membership list and create a new document. You will see\nthat the Library Member field is a dropdown with existing records shown as\noptions. Select a Library Member and the Full Name will be fetched\nautomatically. Pretty cool, right?\n\nLinked DocTypes\n\nLinked DocTypes are DocTypes that are linked in other doctypes as Link fields.\nAll doctypes are linkable. We can classify doctypes broadly into Master and\nTransactional based on the type of data they store. Article, Library Member are\nexamples of Master data because they represent an entity (physical or virtual).\nLibrary Membership is an example of doctype which stores transactional data.\n\nSubmittable DocTypes\n\nWhen you enable Is Submittable in a DocType is becomes a Submittable\nDocType. A Submittable doctype can have 3 states: Draft, Submitted and\nCancelled. A document in the Draft state can be changed like any\ndocument, however once it is in Submitted state, the value of any field in\nthe document cannot be changed. A Submitted document can be Cancelled, which\nmakes the document invalid. If you notice, an extra field was added in our\nLibrary Membership doctype called Amended From. This field is used to keep\ntrack of amendments in documents. Once a document is Cancelled, it can only be\namended, which means it can be duplicated and the cancelled document will be\nlinked to the new amended document via the Amended From field.\n\nController Validation for Membership\n\nNow, let's write code that will make sure whenever a Library Membership is\ncreated, there is no active membership for the Member.\n\nlibrary_membership.py\n\nimport frappe\nfrom frappe.model.document import Document\nfrom frappe.model.docstatus import DocStatus\n\nclass LibraryMembership(Document):\n # check before submitting this document\n def before_submit(self):\n exists = frappe.db.exists(\n \"Library Membership\",\n {\n \"library_member\": self.library_member,\n \"docstatus\": DocStatus.submitted(),\n # check if the membership's end date is later than this membership's start date\n \"to_date\": (\">\", self.from_date),\n },\n )\n if exists:\n frappe.throw(\"There is an active membership for this member\")\n\nWe wrote our logic in the before_submit method which will run before we submit\nthe document. We used the frappe.db.exists method to check if a Library\nMembership record exists with our provided filters. If it exists, we used\nfrappe.throw to stop the execution of program with a message that will show up\nletting the user know the reason.\n\nNow, try creating a Library Membership with an overlapping period and you should\nsee an error when you submit the document.\n\nLibrary Transaction\n\nLet's create a DocType to record an Issue or Return of an Article by a Library\nMember who has an active membership.\n\nThis doctype will be called Library Transaction and will have the following\nfields:\n\nArticle - Link to Article\nLibrary Member - Link to Library Member\nType - Select with 2 options: Issue and Return\nDate - Date of Transaction\n\nThis doctype will also be a Submittable doctype.\n\nValidation for Transaction\n\nWhen an Article is issued, we should verify whether the Library Member has an\nactive membership. We should also check whether the Article is available for\nIssue. Let's write the code for these validations.\n\nlibrary_transaction.py\n\nimport frappe\nfrom frappe.model.document import Document\nfrom frappe.model.docstatus import DocStatus\n\nclass LibraryTransaction(Document):\n def before_submit(self):\n if self.type == \"Issue\":\n self.validate_issue()\n # set the article status to be Issued\n article = frappe.get_doc(\"Article\", self.article)\n article.status = \"Issued\"\n article.save()\n\n elif self.type == \"Return\":\n self.validate_return()\n # set the article status to be Available\n article = frappe.get_doc(\"Article\", self.article)\n article.status = \"Available\"\n article.save()\n\n def validate_issue(self):\n self.validate_membership()\n article = frappe.get_doc(\"Article\", self.article)\n # article cannot be issued if it is already issued\n if article.status == \"Issued\":\n frappe.throw(\"Article is already issued by another member\")\n\n def validate_return(self):\n article = frappe.get_doc(\"Article\", self.article)\n # article cannot be returned if it is not issued first\n if article.status == \"Available\":\n frappe.throw(\"Article cannot be returned without being issued first\")\n\n def validate_membership(self):\n # check if a valid membership exist for this library member\n valid_membership = frappe.db.exists(\n \"Library Membership\",\n {\n \"library_member\": self.library_member,\n \"docstatus\": DocStatus.submitted(),\n \"from_date\": (\"<\", self.date),\n \"to_date\": (\">\", self.date),\n },\n )\n if not valid_membership:\n frappe.throw(\"The member does not have a valid membership\")\n\nThere is a lot of code here but it should be self explanatory. There are inline\ncode comments for more explanation.\n\nLibrary Settings\n\nLet's create the last doctype for our app: Library Settings. It will have\nthe following fields:\n\nLoan Period - Will define the loan period in number of days\nMaximum Number of Issued Articles - Restrict the maximum number of articles that can be issued by a single member\n\nSince we don't need to have multiple records for these settings, we will enable\nIs Single for this doctype.\n\nAfter creating the doctype, click on Go to Library Settings, to go to the\nform and set the values for Loan Period and Maximum Number of Issued\nArticles.\n\nSingle DocTypes\n\nWhen a DocType has Is Single enabled, it will become a Single DocType. A\nsingle doctype is similar to singleton records in other frameworks. It does not\ncreate a new database table. Instead all single values are stored in a single\ntable called tabSingles. It is used usually for storing global settings.\n\nValidation for Library Settings\n\nLet's make the change in Library Membership such that, the To Date automatically\ncomputed based on the Loan Period and the From Date.\n\nlibrary_membership.py\n\nfrom frappe.model.document import Document\nfrom frappe.model.docstatus import DocStatus\n\nimport frappe\n\nclass LibraryMembership(Document):\n # check before submitting this document\n def before_submit(self):\n exists = frappe.db.exists(\n \"Library Membership\",\n {\n \"library_member\": self.library_member,\n \"docstatus\": DocStatus.submitted(),\n # check if the membership's end date is later than this membership's start date\n \"to_date\": (\">\", self.from_date),\n },\n )\n if exists:\n frappe.throw(\"There is an active membership for this member\")\n\n # get loan period and compute to_date by adding loan_period to from_date\n loan_period = frappe.db.get_single_value(\"Library Settings\", \"loan_period\")\n self.to_date = frappe.utils.add_days(self.from_date, loan_period or 30)\n\nWe have used frappe.db.get_single_value method to get the value of\nloan_period from the Library Settings doctype.\n\nNow, let's make the change in Library Transaction such that when an Article is\nIssued, it checks whether the maximum limit is reached.\n\nlibrary_transaction.py\n\nimport frappe\nfrom frappe.model.document import Document\nfrom frappe.model.docstatus import DocStatus\n\nclass LibraryTransaction(Document):\n def before_submit(self):\n if self.type == \"Issue\":\n self.validate_issue()\n self.validate_maximum_limit()\n # set the article status to be Issued\n article = frappe.get_doc(\"Article\", self.article)\n article.status = \"Issued\"\n article.save()\n\n elif self.type == \"Return\":\n self.validate_return()\n # set the article status to be Available\n article = frappe.get_doc(\"Article\", self.article)\n article.status = \"Available\"\n article.save()\n\n def validate_issue(self):\n self.validate_membership()\n article = frappe.get_doc(\"Article\", self.article)\n # article cannot be issued if it is already issued\n if article.status == \"Issued\":\n frappe.throw(\"Article is already issued by another member\")\n\n def validate_return(self):\n article = frappe.get_doc(\"Article\", self.article)\n # article cannot be returned if it is not issued first\n if article.status == \"Available\":\n frappe.throw(\"Article cannot be returned without being issued first\")\n\n def validate_maximum_limit(self):\n max_articles = frappe.db.get_single_value(\"Library Settings\", \"max_articles\")\n count = frappe.db.count(\n \"Library Transaction\",\n {\n \"library_member\": self.library_member,\n \"type\": \"Issue\",\n \"docstatus\": DocStatus.submitted(),\n },\n )\n if count >= max_articles:\n frappe.throw(\"Maximum limit reached for issuing articles\")\n\n def validate_membership(self):\n # check if a valid membership exist for this library member\n valid_membership = frappe.db.exists(\n \"Library Membership\",\n {\n \"library_member\": self.library_member,\n \"docstatus\": DocStatus.submitted(),\n \"from_date\": (\"<\", self.date),\n \"to_date\": (\">\", self.date),\n },\n )\n if not valid_membership:\n frappe.throw(\"The member does not have a valid membership\")\n\nWe added a validate_maximum_limit method and used frappe.db.count to count\nthe number of transactions made by the member.\n\nWith that, we have covered the basics of doctype creation and types of doctype.\nWe also wrote business logic for various doctypes.\n\nGood job making it this far. Let's keep going.\n\nNext: Form Scripts",
  "scrapedAt": "2025-10-22T00:01:09.257Z"
}