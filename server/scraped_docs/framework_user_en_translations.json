{
  "route": "framework/user/en/translations",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/translations",
  "title": "Frappe comes with a built-in translation system for capturing translatable strings",
  "content": "Frappe comes with a built-in translation system for capturing translatable strings\nfrom code and extracting them into CSV files for different languages.\n\nHow it works\n\nTranslations happen in three steps.\n\n1. Extracting translatable strings\n\nMany strings like field label and description that are easily parseable from\nJSON files of DocTypes are automatically marked as translatable without any\nexplicit hint.\n\nOther strings are extracted from source code files such as .json, .js,\n.py. These are extracted only if they are marked explicitly by the author in\n_() or __() methods.\n\nFor example:\n\nmessage = _(\"You don't have permissions to access this file\")\n\n2. Translating the extracted strings\n\nOnce we have a list of strings that we want to translate, they are put into CSV\nfiles based on the language. Translations are primarily contributed by various\nusers of Frappe and ERPNext on the translator portal.\n\nThe submitted translations are verified and then converted into a Pull Request\nby a bot every week and merged into the core.\n\n3. Translating strings in app\n\nTranslations are nothing but a key-value pair made of original string and it's\ntranslation in a language. It might look like this:\n\n{\n \"1 hour ago\": \"एक घंटे पहले\",\n \"1 minute ago\": \"1 मिनट पहले\",\n \"1 month\": \"1 महीना\",\n \"1 week\": \"1 सप्ताह\",\n \"1 year\": \"1 साल\",\n \"3 months\": \"3 महीने\",\n \"6 months\": \"6 महीने\",\n \"About\": \"के बारे में\",\n \"About Us Settings\": \"हमारे बारे में सेटिंग्स\",\n \"About Us Team Member\": \"हमारे बारे में टीम के सदस्य\",\n \"Academic Term\": \"शैक्षणिक शब्द\",\n \"Academic Year\": \"शैक्षणिक वर्ष\",\n \"Academics User\": \"अकादमिक उपयोगकर्ता\",\n ...\n}\n\nWhen the string is written as __('1 hour ago') in the code, the __ method\nlooks up the dictionary to find whether a translation exists for that string. If\nyes, the translated string would be returned and it would show up.\n\nThis was an example of how translations work in JavaScript files, but the same\nworks in Python too.\n\nTips on writing a valid translatable string\n\nThere are a few rules that need to be followed for the translation parser to\npick up the strings properly from code.\n\n1. Literal strings\n\nThe string to be translated must always be a literal string, not a variable or\nexpression.\n\nExample in Python\n\n# This will work\nmessage = _('Document submitted successfully')\nfrappe.msgprint(message)\n\n# This will also work\nfrappe.msgprint(_('Document submitted successfully'))\n\n# This won't work\nmessage = 'Document submitted successfully'\nfrappe.msgprint(_(message))\n\nExample in JavaScript\n\n// This will work\nmessage = __('Document submitted successfully')\nfrappe.msgprint(message)\n\n// This won't work\nmessage = 'Document submitted successfully'\nfrappe.msgprint(__(message))\n\n2. Variables\n\nIf you have variables in your string, you must use the positional formatter\n{0}, any other type of formatter won't work.\n\nExample in Python\n\n# This is fine\n_('Welcome {0}, get started with ERPNext in just a few clicks.').format(full_name)\n\n# These are not\n_('Welcome %s, get started with ERPNext in just a few clicks.' % full_name)\n\n_('Welcome %(name)s, get started with ERPNext in just a few clicks.' % {'name': full_name})\n\n# This one uses the positional formatter,\n# but won't work because the string is formatted before it is passed to _()\n_('Welcome {0}, get started with ERPNext in just a few clicks.'.format(full_name))\n\nExample in JavaScript\n\n// This is fine\n__('Welcome {0}, get started with ERPNext in just a few clicks.', [full_name])\n\n// This is not\n__(`Welcome ${full_name}, get started with ERPNext in just a few clicks.`)\n\n3. Blocks\n\nDon't split your string into separate blocks of strings and then concatenate\nthem. Don't write multiline strings. Always write your string in a single even\nif the string is very large.\n\nExample in Python\n\n# This is fine\n_('You have {0} subscribers in your mailing list.').format(len(subscribers))\n\n# Don't split strings\n_('You have ') + len(subscribers) + _(' subscribers in your mailing list.')\n\n# Don't write multiline strings\n_('You have {0} subscribers \\\n in your mailing list').format(len(subscribers))\n\nExample in JavaScript\n\n// This is fine\n__('You have {0} subscribers in your mailing list.', [subscribers.length])\n\n// Don't split strings\n__('You have ') + subscribers.length + __(' subscribers in your mailing list.')\n\n// Don't write multiline strings\n__('You have {0} subscribers' +\n 'in your mailing list', [subscribers.length])\n\n4. Plural\n\nDon't try to pluralize words using logic. Every language has different plural\nforms.\n\n# Don't do this\nmsg = _(\"You have {0} pending invoice\").format(invoice_count)\nif invoice_count > 1:\n msg += _(\"s\")\n\n# Write separate strings\n# Every language has different plural forms\nif invoice_count > 1:\n msg = _(\"You have {0} pending invoices\").format(invoice_count)\nelse:\n msg = _(\"You have {0} pending invoice\").format(invoice_count)\n\n5. No Trailing Spaces\n\nDon't start or end the sentence with spaces. Trailing spaces gets trimmed for other languages when passed through translation engine.\n\nIf you have to add space around your text, you can do it outside the translation syntax.\n\n# Don't do this\nmsg = _(\" You have {0} pending invoice \")\n\n# Do this\nmsg = ' ' + _(\"You have {0} pending invoices\") + ' '\n\n6. Adding context for a string\n\nA translatable string can have different meaning in different context.\nFor example, string \"Change\" can mean \"to make or become different\" or \"Coins\".\nSo to tackle this issue context variable can be used to set the context for\na string so that it can be translated differently in different\nlanguage using Translation Tool.\n\nIn JavaScript\n\n__(\"Change\", null, \"Coins\")\n\n// Here \"Coins\" is the context for text \"Change\"\n\nIn Python\n\n_(\"Change\", context=\"Switch\")\n\n# Here \"Switch\" is the context for text \"Change\"\n\nAdding a New Language\n\nTo add a new language, follow these steps:\n\nStep 1: Export to a file\n\n$ bench --site sitename get-untranslated [lang] [path-to-file]\n\nStep 2: Translate\n\nCreate another file with updated translations (in the same order as the source\nfile). For this you can use the Google Translator or\nBing Translator.\n\nStep 3: Import your translations\n\n$ bench update-translations [lang] [source-path] [translated-path]\n\nA new file will be created with the name [lang].csv in the translations\nfolder in each app.\n\nStep 4: Update languages.json\n\nAdd your language in frappe/geo/languages.json\n\nStep 5: Commit each app and push\n\nCommit your changes with the .csv files in each app and push them to their\nrepositories.",
  "scrapedAt": "2025-10-22T00:04:48.371Z"
}