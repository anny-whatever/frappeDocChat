{
  "route": "framework/user/en/guides/automated-testing/unit-testing",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/guides/automated-testing/unit-testing",
  "title": "1.Introduction",
  "content": "1.Introduction\n\nFrappe provides some basic tooling to quickly write automated tests. There are some basic rules:\n\nTest can be anywhere in your repository but must begin with test_ and should be a .py file.\nTests must run on a site that starts with test_. This is to prevent accidental loss of data.\nTest stubs are automatically generated for new DocTypes.\nFrappe test runner will automatically build test records for dependant DocTypes identified by the Link type field (Foreign Key)\nTests can be executed using bench run-tests\nFor non-DocType tests, you can write simple unittests and prefix your file names with test_.\n\nWriting Tests for DocTypes\n\n2.1. Writing DocType Tests:\n\nTest cases are in a file named test_[doctype].py\nYou must create all dependencies in the test file\nCreate a Python module structure to create fixtures / dependencies\n\nExample (for test_event.py):\n\n # Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors\n # MIT License. See license.txt\n\n import frappe\n import frappe.defaults\n\n from frappe.tests.utils import FrappeTestCase\n\n def create_events():\n if frappe.flags.test_events_created:\n return\n\n frappe.set_user(\"Administrator\")\n doc = frappe.get_doc({\n \"doctype\": \"Event\",\n \"subject\":\"_Test Event 1\",\n \"starts_on\": \"2014-01-01\",\n \"event_type\": \"Public\"\n }).insert()\n\n doc = frappe.get_doc({\n \"doctype\": \"Event\",\n \"subject\":\"_Test Event 2\",\n \"starts_on\": \"2014-01-01\",\n \"event_type\": \"Private\"\n }).insert()\n\n doc = frappe.get_doc({\n \"doctype\": \"Event\",\n \"subject\":\"_Test Event 3\",\n \"starts_on\": \"2014-01-01\",\n \"event_type\": \"Public\"\n \"event_individuals\": [{\n \"person\": \"test1@example.com\"\n }]\n }).insert()\n\n frappe.flags.test_events_created = True\n\n class TestEvent(FrappeTestCase):\n def setUp(self):\n create_events()\n\n def tearDown(self):\n frappe.set_user(\"Administrator\")\n\n def test_allowed_public(self):\n frappe.set_user(\"test1@example.com\")\n doc = frappe.get_doc(\"Event\", frappe.db.get_value(\"Event\",\n {\"subject\":\"_Test Event 1\"}))\n self.assertTrue(frappe.has_permission(\"Event\", doc=doc))\n\n def test_not_allowed_private(self):\n frappe.set_user(\"test1@example.com\")\n doc = frappe.get_doc(\"Event\", frappe.db.get_value(\"Event\",\n {\"subject\":\"_Test Event 2\"}))\n self.assertFalse(frappe.has_permission(\"Event\", doc=doc))\n\n def test_allowed_private_if_in_event_user(self):\n doc = frappe.get_doc(\"Event\", frappe.db.get_value(\"Event\",\n {\"subject\":\"_Test Event 3\"}))\n\n frappe.set_user(\"test1@example.com\")\n self.assertTrue(frappe.has_permission(\"Event\", doc=doc))\n\n def test_event_list(self):\n frappe.set_user(\"test1@example.com\")\n res = frappe.get_list(\"Event\", filters=[[\"Event\", \"subject\", \"like\", \"_Test Event%\"]], fields=[\"name\", \"subject\"])\n self.assertEqual(len(res), 2)\n subjects = [r.subject for r in res]\n self.assertTrue(\"_Test Event 1\" in subjects)\n self.assertTrue(\"_Test Event 3\" in subjects)\n self.assertFalse(\"_Test Event 2\" in subjects)\n\n2. Running Tests\n\nThis function will build all the test dependencies and run your tests.\nYou should run tests from \"frappe_bench\" folder. Without options all tests will be run.\n\nbench run-tests\n\nIf you need more information about test execution - you can use verbose log level for bench.\n\nbench --verbose run-tests\n\nOptions:\n\n --app <appname>\n --doctype <doctype>\n --test <specifictest>\n --module <module> (Run a particular module that has tests)\n --profile (Runs a Python profiler on the test)\n --junit-xml-output<pathtoxml> (The command provides test results in the standard XUnit XML format)\n\n2.1. Example for app:\n\nAll applications are located in folder: \"~/frappe-bench/apps\".\nWe can run tests for each application.\n\nfrappe-bench/apps/erpnext/\nfrappe-bench/apps/erpnext_demo/\nfrappe-bench/apps/frappe/\n\n bench run-tests --app erpnext\n bench run-tests --app erpnext_demo\n bench run-tests --app frappe\n\n2.2. Example for doctype:\n\n frappe@erpnext:~/frappe-bench$ bench run-tests --doctype \"Activity Cost\"\n .\n ----------------------------------------------------------------------\n Ran 1 test in 0.008s\n\n OK\n\n2.3. Example for test:\n\nRun a specific case in User:\n\n frappe@erpnext:~/frappe-bench$ bench run-tests --doctype User --test test_get_value\n .\n ----------------------------------------------------------------------\n Ran 1 test in 0.005s\n\n OK\n\n2.4. Example for module:\n\nIf we want to run tests in the module:\n\n/home/frappe/frappe-bench/apps/erpnext/erpnext/support/doctype/issue/test_issue.py\n\nWe should use module name like this (related to application folder)\n\nerpnext.support.doctype.issue.test_issue\n\nExample:\n\n frappe@erpnext:~/frappe-bench$ bench run-tests --module \"erpnext.stock.doctype.stock_entry.test_stock_entry\"\n ...........................\n ----------------------------------------------------------------------\n Ran 27 tests in 30.549s\n\n2.5. Example for profile:\n\n frappe@erpnext:~/frappe-bench$ bench run-tests --doctype \"Activity Cost\" --profile\n .\n ----------------------------------------------------------------------\n Ran 1 test in 0.010s\n\n OK\n 9133 function calls (8912 primitive calls) in 0.011 seconds\n\n Ordered by: cumulative time\n\n ncalls tottime percall cumtime percall filename:lineno(function)\n 2 0.000 0.000 0.008 0.004 /home/frappe/frappe-bench/apps/frappe/frappe/model/document.py:187(insert)\n 1 0.000 0.000 0.003 0.003 /home/frappe/frappe-bench/apps/frappe/frappe/model/document.py:386(_validate)\n 13 0.000 0.000 0.002 0.000 /home/frappe/frappe-bench/apps/frappe/frappe/database.py:77(sql)\n 255 0.000 0.000 0.002 0.000 /home/frappe/frappe-bench/apps/frappe/frappe/model/base_document.py:91(get)\n 12 0.000 0.000 0.002 0.000\n\n#### 2.6 Running Tests without creating fixtures or before_tests hook\n\n- When you are building a feature it is useful to write tests without building test dependencies (i.e build fixtures for linked objects), with `--skip-test-records`\n- You can also skip the test initialisation script with `--skip-before-tests`\n\nExample\n\n bench --site school.erpnext.local run-tests --doctype \"Student Group\" --skip-test-records --skip-before-tests\n\n### 3.0 `FrappeTestCase` \n\n`FrappeTestCase` is Frappe Framework specific TestCase class extended from `unittest.TestCase`. Inherting this class in your tests ensures:\n\n1. `frappe.local.flags` and other most used local proxies are reset after test case runs.\n2. database - a new [database transaction](https://frappeframework.com/docs/v14/user/en/api/database#database-transaction-model) is started before testcase begins and rolled back after tests are finished.\n\nUsage \n\n``` python\n\n# app/doctype/dt/test_dt.py\n\nfrom frappe.tests.utils import FrappeTestCase\n\nclass TestDt(FrappeTestCase):\n @classmethod\n def setUpClass(cls):\n super().setUpClass() # important to call super() methods when extending TestCase. \n ...\n\nWriting XUnit XML Tests\n\nHow to run:\n\nbench run-tests --junit-xml-output=/reports/junit_test.xml\n\nExample of test report:\n\n <testsuite tests=\"3\">\n <testcase classname=\"foo1\" name=\"ASuccessfulTest\">\n <testcase classname=\"foo2\" name=\"AnotherSuccessfulTest\">\n <testcase classname=\"foo3\" name=\"AFailingTest\">\n <failure type=\"NotEnoughFoo\"> details about failure </failure>\n </testcase>\n </testcase></testcase></testsuite>\n\nIt’s designed for the CI Jenkins, but will work for anything else that understands an XUnit-formatted XML representation of test results.\n\nJenkins configuration support:\n\nYou should install xUnit plugin - https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin\nAfter installation open Jenkins job configuration, click the box named “Publish JUnit test result report” under the \"Post-build Actions\" and enter path to XML report:\n(Example: reports/*.xml)",
  "scrapedAt": "2025-10-22T00:03:30.721Z"
}