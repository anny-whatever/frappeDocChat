{
  "route": "framework/user/en/bench/extending-the-cli",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/bench/extending-the-cli",
  "title": "Along with the framework commands, Frappe's bench_manager module also searches",
  "content": "Along with the framework commands, Frappe's bench_manager module also searches\nfor any commands in your custom applications. Thereby, bench communicates with\nthe respective bench's Frappe which in turn will check for available commands in\nall of the applications.\n\nTo make your custom command available to bench, just create a commands module\nunder your parent module and write the command with a click wrapper and a\nvariable commands which contains a list of click functions, which are your own\ncommands.\n\nThe directory structure with a Frappe App flags may be visualized as:\n\nfrappe-bench\n|──apps\n |── frappe\n ├── flags\n │ ├── README.md\n │ ├── flags\n │ │ ├── commands <------ commands module\n │ ├── license.txt\n │ ├── requirements.txt\n │ └── setup.py\n\nThe commands module maybe a single file such as commands.py or a directory\nwith an __init__.py file. For a custom application of name 'flags', an example\nmay be given as\n\n# file_path: frappe-bench/apps/flags/flags/commands.py\nimport click\n\n@click.command('set-flags')\n@click.argument('state', type=click.Choice(['on', 'off']))\ndef set_flags(state):\n from flags.utils import set_flags\n set_flags(state=state)\n\ncommands = [\n set_flags\n]\n\nand with the context of the current bench, this command maybe executed simply as\n\n➜ bench set-flags\nFlags are set to state: 'on'",
  "scrapedAt": "2025-10-22T00:04:05.440Z"
}