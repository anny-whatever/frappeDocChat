{
  "route": "framework/user/en/portal-pages",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/portal-pages",
  "title": "Frappe Framework not only provides a rich admin interface via the",
  "content": "Frappe Framework not only provides a rich admin interface via the\nDesk which is an SPA but also static server rendered web\npages. These pages are generally built for your website visitors. They can be\npublic or can require login.\n\nAdding pages\n\nEvery frappe app including frappe comes with a www folder which directly maps\nto website urls. Here is what the directory structure looks like:\n\nfrappe/www\n├── about.html\n├── about.py\n├── contact.html\n├── contact.py\n├── desk.html\n├── desk.py\n├── login.html\n├── login.py\n├── me.html\n└── me.py\n\nThis structure enables the routes /about, /contact, /desk, /login and\n/me.\n\nTo add your own page, just add an HTML file in the www folder of your app.\nThere are multiple ways to organize these portal pages. For example,\n\ncustom_app/www\n├── custom_page.html\n└── custom_page.py\n\nWill be rendered on the route /custom_page.\n\nTo add subpages you can convert your main page into a folder and add its content\nin an index file. For example,\n\ncustom_app/www\n└── custom_page\n ├── index.html\n ├── index.py\n ├── subpage.html\n └── subpage.py\n\nWill still be rendered on the route /custom_page and /custom_page/subpage\nwill also be available.\n\n You can write .md files instead of .html for simple static pages like\n documentation. This documentation you are reading is written as a markdown file.\n\nOverriding standard pages\n\nFrappe also allows you to override standard pages through your custom app. For\nexample, to override the standard /about provided by frappe, just add a file\nnamed about.html in the www folder of your app and it will take precedence.\n\nTemplating\n\nYou can add dynamic content to Portal Pages using Jinja templates. All of the\nportal pages extend from the base template frappe/templates/web.html which\nitself extends from frappe/templates/base.html.\n\nHere is what a sample page might look like:\n\n{% extends \"templates/web.html\" %}\n\n{% block title %}{{ _(\"About Us\") }}{% endblock %}\n\n{% block page_content %}\n{{ _(\"About Us\") }}\n====================\n\n We believe that great companies are driven by excellence,\n and add value to both its customers and society.\n You will find our team embibes these values.\n\n{% endblock %}\n\nYou can also omit the extend and block if you want to the use the default\nbase template.\n\n{{ _(\"About Us\") }}\n====================\n\n We believe that great companies are driven by excellence,\n and add value to both its customers and society.\n You will find our team embibes these values.\n\nContext\n\nEvery portal page can have a python controller which will build context for\nthe page. The controller should have the same name as the .html or .md file\nwith a .py extension.\n\ncustom_app/www\n├── custom_page.html\n└── custom_page.py\n\nThe controller should have a get_context method which takes a context dict,\nadds any data to it and then returns it. Here is what a sample page controller\nmight look like:\n\n# about.py\nimport frappe\n\ndef get_context(context):\n context.about_us_settings = frappe.get_doc('About Us Settings')\n return context\n\nUsage in template\n\n{{ _(\"About Us\") }}\n====================\n\n We believe that great companies are driven by excellence,\n and add value to both its customers and society.\n You will find our team embibes these values.\n\n {% if about_us_settings.show_contact_us %}\n [Contact Us](/contact)\n {% endif %}\n\n Since Portal Pages are built using Jinja, frappe provides a standard\n API to use in jinja templates.\n\nList of standard context keys\n\nHere is a list of all the standard keys that can be set in context and their\nfunctionalities.\n\n Context Key\n Functionality\n\n add_breadcrumbs\n Add breadcrumbs to page\n\n no_breadcrumbs\n Remove breadcrumbs from page\n\n show_sidebar\n Show web sidebar\n\n safe_render\n Toggle safe_render\n\n no_header\n Hide header\n\n no_cache\n Disable caching for this page\n\n sitemap\n Include/exclude page in sitemap\n\n add_next_prev_links\n Add Next and Previous navigation buttons\n\n title\n Set the page title\n\nsafe_render\n\nfrappe.render_template does not render a template which contains the string\n.__ to prevent running any illegal python expressions. You may want to disable\nthis behaviour if you are sure that the content is safe. To do this, you need to\nturn off safe render by setting the value of safe_render key to False in\ncontext.\n\nSet context via frontmatter\n\nYou can also set values in context using a frontmatter block. Frontmatter blocks\ncan be used to set static values specific to a page like meta tags.\n\nTake a look at the following example:\n\n---\ntitle: Introduction\nmetatags:\n description: This is description for the introduction page\n---\n\n# Introduction\nThis is an introduction page\n\nThe above frontmatter block will update the context dict with the following values:\n\n{\n 'title': 'Introduction',\n 'metatags': {\n 'description': 'This is description for the introduction page'\n }\n}\n\nSet context via comments\n\nYou can also set some values in context by adding html comments in your pages.\n\nFor example by adding `to your.htmlor.mdfile,\ncontext.add_breadcrumbswill be set toTrue` and it will automatically generate\nbreadcrumbs based on folder structure.\n\n{{ _(\"About Us\") }}\n====================\n\n We believe that great companies are driven by excellence,\n and add value to both its customers and society.\n You will find our team embibes these values.\n\n {% if about_us_settings.show_contact_us %}\n [Contact Us](/contact)\n {% endif %}\n\nHere is a list of keys that you can set and their context values:\n\n Comment\n Context Value\n\n ``\n add_breadcrumbs = 1\n\n ``\n no_breadcrumbs = 1\n\n ``\n show_sidebar = 1\n\n ``\n no_header = 1\n\n ``\n no_cache = 1\n\n ``\n sitemap = 0\n\n ``\n sitemap = 1\n\n ``\n add_next_prev_links = 1\n\n ``\n title = 'Custom Title'\n\n ``\n base_template = 'custom_app/path/to/custom_base.html'\n\nCustom CSS and JS\n\nYou can add custom CSS and JS for your pages by dropping a .css or .js file\nof the same name.\n\ncustom_app/www\n├── custom_page.html\n├── custom_page.css\n├── custom_page.js\n└── custom_page.py\n\nHome Page\n\nThe home page for your portal can be defined in\n\nRole\nPortal Settings (this will be for logged in users)\nVia Hook get_website_user_home_page\nWebsite Settings (this will be for non logged in users as well - i.e. Guest)",
  "scrapedAt": "2025-10-22T00:03:49.845Z"
}