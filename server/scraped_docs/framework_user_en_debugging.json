{
  "route": "framework/user/en/debugging",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/debugging",
  "title": "Server",
  "content": "Server\n\nWhen you run the bench start command during development, the log from each process of the Procfile is logged in the terminal window.\n\n▶ bench start\n14:55:17 system | redis_cache.1 started (pid=4085)\n14:55:17 system | redis_socketio.1 started (pid=4086)\n14:55:17 system | redis_queue.1 started (pid=4088)\n14:55:17 system | web.1 started (pid=4089)\n14:55:17 system | socketio.1 started (pid=4090)\n14:55:17 system | watch.1 started (pid=4094)\n14:55:17 system | worker_short.1 started (pid=4096)\n14:55:17 system | schedule.1 started (pid=4095)\n14:55:17 redis_queue.1 | 4088:C 22 May 14:55:17.257 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo\n14:55:17 redis_queue.1 | 4088:C 22 May 14:55:17.264 # Redis version=4.0.11, bits=64, commit=00000000, modified=0, pid=4088, just started\n14:55:17 redis_queue.1 | 4088:C 22 May 14:55:17.264 # Configuration loaded\n14:55:17 redis_queue.1 | 4088:M 22 May 14:55:17.265 * Increased maximum number of open files to 10032 (it was originally set to 4864).\n14:55:17 redis_cache.1 | 4085:C 22 May 14:55:17.262 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo\n14:55:17 redis_cache.1 | 4085:C 22 May 14:55:17.268 # Redis version=4.0.11, bits=64, commit=00000000, modified=0, pid=4085, just started\n14:55:17 redis_cache.1 | 4085:C 22 May 14:55:17.268 # Configuration loaded\n14:55:17 redis_cache.1 | 4085:M 22 May 14:55:17.269 * Increased maximum number of open files to 10032 (it was originally set to 4864).\n14:55:17 redis_socketio.1 | 4086:C 22 May 14:55:17.262 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo\n14:55:17 redis_socketio.1 | 4086:C 22 May 14:55:17.270 # Redis version=4.0.11, bits=64, commit=00000000, modified=0, pid=4086, just started\n14:55:17 redis_socketio.1 | 4086:C 22 May 14:55:17.270 # Configuration loaded\n14:55:17 redis_socketio.1 | 4086:M 22 May 14:55:17.272 * Increased maximum number of open files to 10032 (it was originally set to 4864).\n14:55:17 redis_queue.1 | 4088:M 22 May 14:55:17.285 * Running mode=standalone, port=11002.\n14:55:17 redis_queue.1 | 4088:M 22 May 14:55:17.285 # Server initialized\n14:55:17 redis_queue.1 | 4088:M 22 May 14:55:17.286 * Ready to accept connections\n14:55:17 redis_cache.1 | 4085:M 22 May 14:55:17.287 * Running mode=standalone, port=13002.\n14:55:17 redis_cache.1 | 4085:M 22 May 14:55:17.292 # Server initialized\n14:55:17 redis_cache.1 | 4085:M 22 May 14:55:17.292 * Ready to accept connections\n14:55:17 redis_socketio.1 | 4086:M 22 May 14:55:17.294 * Running mode=standalone, port=12002.\n14:55:17 redis_socketio.1 | 4086:M 22 May 14:55:17.294 # Server initialized\n14:55:17 redis_socketio.1 | 4086:M 22 May 14:55:17.295 * Ready to accept connections\n14:55:17 system | worker_long.1 started (pid=4098)\n14:55:17 system | worker_default.1 started (pid=4100)\n14:55:18 socketio.1 | listening on *: 9002\n14:55:20 socketio.1 | { Error: connect ECONNREFUSED 0.0.0.0:8002\n14:55:20 socketio.1 | at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1191:14)\n14:55:20 socketio.1 | errno: 'ECONNREFUSED',\n14:55:20 socketio.1 | code: 'ECONNREFUSED',\n14:55:20 socketio.1 | syscall: 'connect',\n14:55:20 socketio.1 | address: '0.0.0.0',\n14:55:20 socketio.1 | port: 8002,\n14:55:20 socketio.1 | response: undefined }\n14:55:24 web.1 | * Running on http://0.0.0.0:8002/ (Press CTRL+C to quit)\n14:55:24 web.1 | * Restarting with fsevents reloader\n14:55:24 watch.1 | yarn run v1.10.1\n14:55:24 watch.1 | $ node rollup/watch.js\n14:55:25 web.1 | * Debugger is active!\n14:55:25 web.1 | * Debugger PIN: 321-355-865\n14:55:26 watch.1 |\n14:55:26 watch.1 | Rollup Watcher Started\n14:55:26 watch.1 |\n14:55:26 watch.1 | Watching...\n14:55:26 watch.1 | Rebuilding frappe-web.css\n14:55:27 watch.1 | Rebuilding frappe-web-b4.css\n14:55:27 watch.1 | Rebuilding chat.js\n14:55:28 web.1 |\n14:55:28 web.1 | test print\n\nWhen you write any print statements in your python code, it will show up in the web: process log if it is a request/response, or in one of worker_ processes if the code runs in a background job.\n\n If you are a VSCode user, you can debug right in your editor by setting breakpoints in your code. Follow these steps to set it up.\n\nLogging\n\nIn case you're running production, you'd need logs all the more to keep track of as much information about your Frappe environment.\n\nOut of the box, logs are stored under the ./logs folder in your bench. From Frappe Version 13, logs are available at site level too, under ./sites/{site}/logs.\n\nThese site logs are created by the Frappe Application, while many of the bench level log files are generated by the processes that support your Frappe environment. Checkout Procfile or supervisor.conf in your bench for more information.\n\n Learn more about Frappe Logs here and the Frappe Logging API from here.\n\nConsole\n\nTo play with Python API, bench provides an iPython shell. After you run the following command, it will import frappe, initialize it and also connect to database.\n\n▶ bench --site [sitename] console\n\nIn [1]: frappe.get_doc('Task', 'TASK00004')\nOut[1]: <erpnext.projects.doctype.task.task.task at=\"\" 0x10825d710=\"\">\n\nClient\n\nClient side debugging is as simple as adding a debugger statement in your JS file. You must open your DevTools in your browser for it to pause on the statement.\n\nfrappe.db.get_value('Task', 'TASK00004', 'status')\n .then(values => {\n debugger\n console.log(values);\n })\n\nConsole\n\nTo play with Client API, you can open your browser's console and use the globally available frappe object to explore and run methods and access properties.\n\n Browser Console\n\n Learn more about the Client API here \n\nDebugging in VS Code / Debug Adapter Protocol\n\n \n\nChecklist for proper functioning.\n\nUpdate Procfile\nGet Visual Studio Code (duh!)\nInstall Python Extension for VS Code\nUpdate launch.json\nStart Debugging\n\nCaveats:\n\nDisables Auto Reload Feature (However You can achieve the same results by manual reload (⌘⇧F5))\nDisables Werkzeug Multithreading\n\n1. Update Procfile\n\nCaution: This modifies the behaviour of bench start\n\nComment out a line (prepend # to it) from the Procfile (located in the bench directory) that looks like this.\n\nweb: bench serve --port 8000\n\nWe will run this process from VS code instead of running it with bench start.\n\n2. Update launch.json Add a configuration to your launch.json in VS Code that should look something like this (This more or less does exactly what the removed line from Procfile does).\n\n{\n \"name\": \"Bench\",\n \"type\": \"python\",\n \"request\": \"launch\",\n \"program\": \"${workspaceFolder}/frappe/frappe/utils/bench_helper.py\",\n \"args\": [\n \"frappe\", \"serve\", \"--port\", \"8000\", \"--noreload\", \"--nothreading\"\n ],\n \"pythonPath\": \"${workspaceFolder}/../env/bin/python\",\n \"cwd\": \"${workspaceFolder}/../sites\",\n \"env\": {\n \"DEV_SERVER\": \"1\"\n }\n}\n\nPaths mentioned in given configuration assumes that you have apps directory as your workspace directory (The directory you open code with). workspaceFolder is a vs code variable that points to (if it's not obvious from its name) workspace directory.\n\nYou are not forced to use apps as your workspace directory, however do remember to change workspaceFolder, pythonPath and cwd accordingly.\n\n3. Execute bench start\n\nThis should be kept running as usual.\n\n4. Start debugging\n\nVS Code -> Debug Panel (⌘⇧D) -> Start Debugging or With a keyboard shortcut(⌘⇧F5).\n\nExplanation\n\n1. program and args\n\n\"program\": \"${workspaceFolder}/frappe/frappe/utils/bench_helper.py\",\n\"args\": [\"frappe\", \"serve\", \"--port\", \"8000\", \"--noreload\", \"--nothreading\"],\n\nDoes exact same thing as bench serve --port 8000 --noreload --nothreading which is same as\n\ncd sites\n../env/bin/python ../apps/frappe/frappe/utils/bench_helper.py frappe serve --port 8000 --noreload --nothreading\n\n--noreload diasbles werkezeug's autoreload fetaure and --nothreading disables multithreading.\n\n2. cwd\n\n\"cwd\": \"${workspaceFolder}/../sites\",\n\nAbove command must be executed from sites directory.\n\n3. env\n\n\"env\": {\n \"DEV_SERVER\": \"1\"\n}\n\nbench start creates an environment variable DEV_SERVER and set it to 1. Socket.io doesn't work correctly without this (long story).\n\nRunning only bench serve doesn't set this variable so you need to explicitly set it.\n\nNote:\n\nCurrently, frappe runs with use_reloader=True and threaded=True, VS Code Debugger for some reason doesn't play well with these features, Django and Flask also have this problem.",
  "scrapedAt": "2025-10-22T00:04:46.998Z"
}