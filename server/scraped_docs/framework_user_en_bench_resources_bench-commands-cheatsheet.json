{
  "route": "framework/user/en/bench/resources/bench-commands-cheatsheet",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/bench/resources/bench-commands-cheatsheet",
  "title": "Printable Bench CLI Cheatsheet",
  "content": "Printable Bench CLI Cheatsheet\n\nGrab a A4 size printable cheatsheet of the most important Bench CLI commands here. Download, print and put it on your desk!\n\nGeneral Usage\n\nbench --version - Show bench version\nbench version - Show version of all apps\nbench src - Show bench repo directory\nbench --help - Show all commands and help\nbench [command] --help - Show help for command\nbench init [bench-name] - Create a new bench (Run from home dir)\n\n--python TEXT Path to Python Executable.\n--ignore-exist Ignore if Bench instance exists.\n--apps_path TEXT path to json files with apps to install after init\n--frappe-path TEXT path to frappe repo\n--frappe-branch TEXT Clone a particular branch of frappe\n--clone-from TEXT copy repos from path\n--clone-without-update copy repos from path without update\n--no-procfile Pull changes in all the apps in bench\n--no-backups Run migrations for all sites in the bench\n--no-auto-update Build JS and CSS artifacts for the bench\n--skip-redis-config-generation Skip redis config generation if already specifying the common-site-config file\n--verbose Verbose output during install\n\nbench --site [site-name] COMMAND - Specify site for command\nbench update - Pulls changes for bench-repo and all apps, applies patches, builds JS and CSS, and then migrates.\n\n--pull Pull changes in all the apps in bench\n--patch Run migrations for all sites in the bench\n--build Build JS and CSS artifacts for the bench\n--bench Update bench\n--requirements Update requirements\n--restart-supervisor restart supervisor processes after update\n--no-backup Don't take a backup before update\n--reset Ignore local changes and update\n--dev Enable developer mode on the new bench and install developer dependencies which are required for running tests.\n\nbench restart Restart all bench services\nbench backup Create a backup of the default site.\n\nBackup will be saved to ~/frappe-bench/sites/{your site}/private/backups/.\n* bench backup-all-sites Backup all sites\n\n+ `--with-files` Backup site with files\n\n* bench restore Restore\n\n+ `--with-private-files` Restore site with private files (Path to tar file)\n+ `--with-public-files` Restore site with public files (Path to tar file)\n\n* bench migrate Run patches, sync schema and rebuild files/translations\n\n+ `--rebuild-website TEXT` Rebuild webpages after migration\n\n* bench migrate-env [python-version] Will migrate the virtual environment to the desired python version\n* bench --site [sitename] set-admin-password [password] Will reset the administrator password\n* bench destroy-all-sessions Destroys all sessions\n\nConfig\n\nbench config - Change bench configuration\n\nauto_update [on/off] Enable/Disable auto update for bench\ndns_multitenant [on/off] Enable/Disable DNS Multitenancy\nhttp_timeout Set http timeout\nrestart_supervisor_on_update Enable/Disable auto restart of supervisor\nserve_default_site Configure nginx to serve the default site on\nupdate_bench_on_update Enable/Disable bench updates on running bench...\n\nbench setup - Setup components\n\nauto-update Add cronjob for bench auto update\nbackups Add cronjob for bench backups\nconfig overwrite or make config.json\nenv Setup virtualenv for bench\nnginx generate config for nginx\nprocfile Setup Procfile for bench start\nproduction setup bench for production\nredis generate config for redis cache\nsocketio Setup node deps for socketio server\nsudoers Add commands to sudoers list for execution...\nsupervisor generate config for supervisor\nadd-domain add custom domain for site\nfirewall setup firewall and block all ports except 22, 80 and 443\nssh-port change the default ssh connection port\nrequirementsUpdate Python and Node packages\n\n--node Update only Node packages\n--python Update only Python packages\n--dev Update only Python development dependencies.\n\nbench set-nginx-port [sitename] [port] - Set site's port in Production\n\nDevelopment\n\nbench new-app [app-name] Creates a new app\nbench get-app [repo-link] - Downloads an app from a git repository and installs it\n\n--branch [branch-name] Fetches specific branch of app\n\nbench install-app [app-name] Installs existing app\nbench remove-from-installed-apps [app-name] Remove app from the list of apps\nbench uninstall-app [app-name] Delete app and everything linked to the app (Bench needs to be running)\nbench remove-app [app-name] Remove app from the bench entirely\nbench --site [sitename] --force reinstall Reinstall with fresh database (Caution: Will wipe out old database)\nbench new-site [sitename] - Creates a new site\n\n--db-name Database name\n--db-host Custom database host URL for remote connection\n--db-port Custom database listening port (eg. port other than the default 3306)\n--mariadb-root-username Root username for MariaDB\n--mariadb-root-password Root password for MariaDB\n--admin-password Administrator password for new site\n--verbose Verbose\n--force Force restore if site/database already exists\n--source_sql Initiate database with a SQL file\n--install-app Install app after installation`\n\nbench use [site] Sets a default site\nbench drop-site Removes site from disk and database completely\n\n--root-login\n--root-password\n\nbench set-config [key] [value] Adds a key-value pair to site's config file\nbench console Opens a IPython console in the bench venv\n\n--autoreload Reload changes to code automatically\n\nbench execute Execute a method inside any app.\n\nEg : bench execute frappe.utils.scheduler.enqueue_scheduler_events\n\nbench --site [sitename] mariadb Opens SQL Console\nbench --site [sitename] export-fixtures [--app TEXT] Export the records defined in the app's hooks as JSON files.\nbench run-tests Run tests\n\n--app App Name\n--doctype DocType to run tests for\n--test Specific Test\n--module Run a particular module that has tests\n--profile Runs a Python profiler on the test\n\nbench disable-production Disables production environment\nbench serve Start a development web server on 0.0.0.0\n\n--port Start the web server on a different port (default: 8000)\n--profile Add a profiler middleware that prints exactly which backend methods get called, how often and how long it takes.\n--proxy The development server may be run behind a proxy, e.g. ngrok / localtunnel\n--noreload Disable automatic restarting of the server when files change.\n--nothreading Disable handling of concurrent requests using threads. Can lead to unexpected behavior when multiple threads are required (for example during PDF generation).\n--with-coverage Measure code coverage and create a report coverage.xml in the sites/ folder. Also activates --noreload and --nothreading.\n\nScheduler\n\nbench enable-scheduler - Enables Scheduler that will run scheduled tasks\nbench doctor - Get diagnostic info about background workers\nbench show-pending-jobs- Get pending jobs\nbench purge-jobs - Destroy all pending jobs\n\nData Import\n\nbench data-import - Imports Bulk Data from .csv, .xls or .xlsx\n\n--file File Name\n--doctype The DocType\n--type Insert/Update",
  "scrapedAt": "2025-10-22T00:04:35.678Z"
}