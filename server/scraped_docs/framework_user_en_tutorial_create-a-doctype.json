{
  "route": "framework/user/en/tutorial/create-a-doctype",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/tutorial/create-a-doctype",
  "title": "create-a-doctype",
  "content": "DocType is analogous to a Model in other frameworks. Apart from defining properties, it also defines the behavior of the Model.\n\nEnable Developer Mode\n\nBefore we can create DocTypes, we need to enable developer mode on our bench. This will enable boilerplate creation when we create doctypes and we can track them into version control with our app.\n\nGo to your terminal and quit the bench server if it's already running then from the frappe-bench directory, run the following command:\n\nbench set-config -g developer_mode true\nbench start\n\nCreating a DocType\n\nWhile in Desk, navigate to the DocType List using the Awesomebar. This list will include DocTypes bundled with the framework, those that are a part of the installed Frappe apps and custom ones, which you can create specific to each site.\n\nThe first doctype we will create is Article. To create it, click on New.\n\nEnter Name as Article\nSelect Library Management in Module\nAdd the following fields in the Fields table:\n\nArticle Name (Data, Mandatory)\nImage (Attach Image)\nAuthor (Data)\nDescription (Text Editor)\nISBN (Data)\nStatus (Select) - Enter two options: Issued and Available (Type Issued, hit enter, then type Available)\nPublisher (Data)\n\nRefer the following GIF to check how it should be done:\n\n \n\nAfter adding the fields, click on Save.\n\nYou will see a Go to Article List button at the top right of the form. Click on it to go to the Article List. Here you will see a blank list with no records because the table has no records.\n\nLet's create some records. But before that, we need to clear the Desk cache. Click on the Settings dropdown on the right side of the navbar and click on Reload.\n\nNow, you should see the New button. Click on it and you will see the Form view of the Article doctype. Fill in the form and click on Save. You have created your first Article document. Go back to the list view and you should see one record.\n\n \n\nWhat happened when you created the Article DocType?\n\n1. Database Table\n\nA database table with the name tabArticle was created with the fields we specified in the fields table. You can confirm this by checking it from the MariaDB console\n\nbench --site library.localhost mariadb\nWelcome to the MariaDB monitor. Commands end with ; or \\g.\nYour MariaDB connection id is 2445938\nServer version: 10.4.13-MariaDB Homebrew\n\nCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nMariaDB [_ad03fa1a016ca1c4]> desc tabArticle;\n+--------------+--------------+------+-----+-----------+-------+\n| Field | Type | Null | Key | Default | Extra |\n+--------------+--------------+------+-----+-----------+-------+\n| name | varchar(140) | NO | PRI | NULL | |\n| creation | datetime(6) | YES | | NULL | |\n| modified | datetime(6) | YES | MUL | NULL | |\n| modified_by | varchar(140) | YES | | NULL | |\n| owner | varchar(140) | YES | | NULL | |\n| docstatus | int(1) | NO | | 0 | |\n| parent | varchar(140) | YES | MUL | NULL | |\n| parentfield | varchar(140) | YES | | NULL | |\n| parenttype | varchar(140) | YES | | NULL | |\n| idx | int(8) | NO | | 0 | |\n| article_name | varchar(140) | YES | | NULL | |\n| image | text | YES | | NULL | |\n| author | varchar(140) | YES | | NULL | |\n| description | longtext | YES | | NULL | |\n| isbn | varchar(140) | YES | | NULL | |\n| status | varchar(140) | YES | | Available | |\n| publisher | varchar(140) | YES | | NULL | |\n| _user_tags | text | YES | | NULL | |\n| _comments | text | YES | | NULL | |\n| _assign | text | YES | | NULL | |\n| _liked_by | text | YES | | NULL | |\n+--------------+--------------+------+-----+-----------+-------+\n21 rows in set (0.002 sec)\n\nMariaDB [_ad03fa1a016ca1c4]>\n\nThe fields we specified in Title Case were converted to snake case automatically, and are used as the column names in the table. For e.g., article_name, image, author , and description.\n\nHowever, many other fields were created like name, creation, modified, modified_by . These are standard fields created for all doctypes. name is the primary key column.\n\nIf you created a record with the Form, you can also run a standard select query to get the rows.\n\nMariaDB [_ad03fa1a016ca1c4]> select * from tabArticle;\n+------------+----------------------------+----------------------------+---------------+---------------+-----------+--------+-------------+------------+-----+-----------------------------+--\n| name | creation | modified | modified_by | owner | docstatus | parent | parentfield | parenttype | idx | article_name | i\n+------------+----------------------------+----------------------------+---------------+---------------+-----------+--------+-------------+------------+-----+-----------------------------+--\n| bd514646b9 | 2020-10-10 16:24:43.033457 | 2020-10-10 16:24:43.033457 | Administrator | Administrator | 0 | NULL | NULL | NULL | 0 | The Girl with all the Gifts | N\n+------------+----------------------------+----------------------------+---------------+---------------+-----------+--------+-------------+------------+-----+-----------------------------+--\n\nMariaDB [_ad03fa1a016ca1c4]>\n\n2. Desk Views\n\nThere are a number of views that were also created for our DocType. The Article List is the list view that shows the records from the database table. The Form view is the view that is shown when you want to create a new document or view an existing one.\n\n3. Form Layout\n\nIf you notice, the layout of fields in the form is according to how you ordered them in the Fields table. For e.g., Article Name is the first field followed by Image which is followed by Author. In later parts of the tutorial we will learn how to customize this further.\n\n4. Boilerplate code\n\nNOTE\n\nMake sure you uncheck the 'Custom?' checkbox in the doctype configuration. Otherwise the files discussed below won't be generated. An explaination for this is given here\n\nIf you look at the changes in your app, you should find a number of files that were created. Go to your terminal and from the frappe-bench directory run the following commands.\n\n$ cd apps/library_management\n$ git status -u\nOn branch master\nUntracked files:\n (use \"git add <file>...\" to include in what will be committed)\n library_management/library_management/doctype/__init__.py\n library_management/library_management/doctype/article/__init__.py\n library_management/library_management/doctype/article/article.js\n library_management/library_management/doctype/article/article.json\n library_management/library_management/doctype/article/article.py\n library_management/library_management/doctype/article/test_article.py\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\narticle.json - JSON file that defines the doctype attributes\n\narticle.js - Client-side controller for the Form view\n\narticle.py - Python controller for Article\n\ntest_article.py - Python Unit Test boilerplate for writing tests\n\nAs you can see, a DocType describes a lot of things about the model. Not only does it define the table and column names but also how it will be rendered in various views in the Desk.\n\nGood job following the tutorial so far. Let's keep going!\n\nNext: DocType Features",
  "scrapedAt": "2025-10-22T00:01:05.871Z"
}