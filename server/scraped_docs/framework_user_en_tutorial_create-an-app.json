{
  "route": "framework/user/en/tutorial/create-an-app",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/tutorial/create-an-app",
  "title": "create-an-app",
  "content": "Create a Frappe app scaffold using the bench CLI.\n\nCreate app\n\nBefore we start, make sure you're in a bench directory. To confirm, run bench find .:\n\n$ bench find .\n/home/frappe/frappe-bench is a bench directory!\n\nTo create our Library Management app, run the new-app command:\n\nbench new-app library_management\n\nYou should get some prompts, and output like the following. You can enter information manually, or press enter to select the defaults\n\nApp Title (default: Library Management):\nApp Description: Library Management System\nApp Publisher: Faris Ansari\nApp Email: faris@example.com\nApp Icon (default 'octicon octicon-file-directory'):\nApp Color (default 'grey'):\nApp License (default 'MIT'):\n'library_management' created at /home/frappe/frappe-bench/apps/library_management\n\nInstalling library_management\n$ ./env/bin/pip install -q -U -e ./apps/library_management\n$ bench build --app library_management\nyarn run v1.22.4\n$ FRAPPE_ENV=production node rollup/build.js --app library_management\nProduction mode\n✔ Built js/moment-bundle.min.js\n✔ Built js/libs.min.js\n✨ Done in 1.95s.\n\nYou will be prompted with details of your app, fill them up and an app named library_management will be created in the apps folder.\n\nTo see a complete list of all icons supported in the octicons library, check out https://primer.style/octicons/\n\nApp directory structure\n\nYour app directory structure should look something like this:\n\napps/library_management\n├── README.md\n├── library_management\n│ ├── hooks.py\n│ ├── library_management\n│ │ └── __init__.py\n│ ├── modules.txt\n│ ├── patches.txt\n│ ├── public\n│ │ ├── css\n│ │ └── js\n│ ├── templates\n│ │ ├── __init__.py\n│ │ ├── includes\n│ │ └── pages\n│ │ └── __init__.py\n│ └── www\n└── pyproject.toml\n\nlibrary_management: This directory will contain all the source code for your app\n\npublic: Store static files that will be served from Nginx in production\ntemplates: Jinja templates used to render web views\nwww: Web pages that are served based on their directory path\nlibrary_management: Default Module bootstrapped with app\nmodules.txt: List of modules defined in the app\npatches.txt: Patch entries for database migrations\nhooks.py: Hooks used to extend or intercept standard functionality provided by the framework\npyproject.toml: Specifies how your app is built, you can optionally add 3rd party Python dependencies here which will get installed when your app is installed.\n\nNext: Create a Site",
  "scrapedAt": "2025-10-22T00:01:03.659Z"
}