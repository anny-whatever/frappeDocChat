{
  "route": "framework/notifications",
  "sourceUrl": "https://docs.frappe.io/framework/notifications",
  "title": "notifications",
  "content": "The Notification doctype in Frappe Framework provides a powerful way to automate notifications across different channels when specific events occur in your system. This guide explains how to configure and use notifications effectively.\n\nGeneral Settings\n\nEnabled: Toggle to activate or deactivate a notification.\nChannel: Select the delivery method for your notification:\n\nEmail: Send notifications via email\nSlack: Send notifications to a Slack channel\nSystem Notification: Display notifications within the Frappe interface\nSMS: Send notifications via SMS (requires SMS Settings configuration)\n\nIs Standard: For developer mode; marks the notification as part of a standard module\n\nEvent Triggers\n\nNotifications can be triggered based on various events:\n\nDocument Events\n\nNew: Triggered when a new document is created\nSave: Triggered when a document is saved\nSubmit: Triggered when a document is submitted\nCancel: Triggered when a document is cancelled\n\nDate-Based Events\n\nDays Before: Triggered a specific number of days before a date field value\nDays After: Triggered a specific number of days after a date field value\nWhen using these events:\n\nReference Date: Select the date field to monitor\nDays Before or After: Specify number of days before/after the date to trigger\n\nValue-Based Events\n\nValue Change: Triggered when a specific field's value changes\n\nValue Changed: Select the field to monitor for changes\n\nMethod-Based Events\n\nMethod: Triggered when a specific document method is called\n\nTrigger Method: Specify the method name (e.g., \"beforeinsert\", \"afterupdate\")\n\nCustom Events\n\nCustom: For programmatically triggered notifications\n\nConditional Triggers\n\nYou can make notifications more targeted by adding conditions:\n\nCondition: A Python expression that must evaluate to True for the notification to be sent\nThe condition has access to:\n\ndoc: The document that triggered the notification\nnowdate(): Current date function\nfrappe.utils: Utility functions\n\nExamples\n\nThe Status of the document is \"Open\"\n\ndoc.status==\"Open\"\n\nThe document's Due Date matches the current date\n\ndoc.due_date==nowdate()\n\nThe total is bigger than 40,000\n\ndoc.total > 40000\n\nRecipients Configuration\n\nEmail, System Notification, and SMS Channels\n\nConfigure recipients using the Recipients table:\n\nReceiver Type:\n\nBy Document Field: Select a field containing email addresses/phone numbers\nBy Role: Select a role whose users will receive the notification\nCustom: Specify custom recipients\n\nAdditional Options:\n\nCC/BCC: For email notifications\nCondition: Python expression to conditionally include recipients\nSend to All Assignees: Include all users assigned to the document\n\nFor Slack Channel\n\nSelect a predefined Slack Webhook URL from the dropdown\n\nMessage Configuration\n\nSubject (for Email, Slack, and System Notifications)\n\nEnter the subject line text\nSupport for Jinja templates: {{ doc.name }} Delivered\n\nMessage Body\n\nMessage Type: Select between HTML, Markdown, or Plain Text (available in developer mode only)\nMessage: Enter the notification content\nUses Jinja templating for dynamic content\n\nTemplating Variables\n\n{{ doc }}: Access any field from the triggering document (e.g., {{ doc.customer }})\n{{ comments }}: Access document comments (e.g., {{ comments[-1].comment }})\n{% if %}...{% endif %}: Conditional logic\n{{ nowdate() }}: Current date\n\nTemplate Example\n\n<h3>Order Overdue</h3>\n\n<p>Transaction {{ doc.name }} has exceeded Due Date. Please take necessary action.</p>\n\n<!-- show last comment -->\n{% if comments %}\nLast comment: {{ comments[-1].comment }} by {{ comments[-1].by }}\n{% endif %}\n\n<h4>Details</h4>\n\n<ul>\n<li>Customer: {{ doc.customer }}\n<li>Amount: {{ doc.grand_total }}\n</ul>\n\nAdvanced Options\n\nAttachments\n\nAttach Print: Attach a PDF printout of the document\nPrint Format: Select a specific print format for the attached PDF\n\nPost-Notification Actions\n\nSet Property After Alert: Update a field after sending the notification\nValue To Be Set: The value to set in the specified field\n\nBest Practices\n\nTest your notifications: Use the \"Get Alerts for Today\" button to test date-based notifications.\nKeep conditions specific: Make sure your conditions are targeted to avoid notification fatigue.\nUse templating wisely: Make messages clear and include only relevant information.\nVerify recipient fields: Ensure fields contain valid email addresses or phone numbers.\nConsider permission levels: Recipients must have permission to access documents referenced in notifications.\n\nTroubleshooting\n\nIf notifications aren't sending, check that the document meets all conditions.\nFor email notifications, verify email settings are properly configured.\nFor SMS notifications, ensure SMS settings are configured.\nFor Slack notifications, verify webhook URL is valid and active.\nCheck server logs for any errors related to notification delivery.\n\nTechnical Notes\n\nNotifications are processed asynchronously to avoid impact on system performance.\nDate-based events are checked daily via a scheduled job.\nDocument-event notifications are triggered in real-time when the associated action occurs.\nConditions and templates are evaluated in a restricted environment for security.\n\nBy effectively configuring the Notification doctype, you can keep users informed about important events and automate communication across your Frappe application.",
  "scrapedAt": "2025-10-22T00:02:25.647Z"
}