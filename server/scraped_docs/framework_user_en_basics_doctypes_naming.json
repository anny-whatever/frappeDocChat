{
  "route": "framework/user/en/basics/doctypes/naming",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/basics/doctypes/naming",
  "title": "All DocTypes in Frappe have a primary key called name. This is the unique id by",
  "content": "All DocTypes in Frappe have a primary key called name. This is the unique id by\nwhich you will be finding records and manipulating them using the ORM.\nYou can configure how docs should be named when a new document is created.\nThe following are the ways you can setup naming in a DocType.\n\nDocType autoname\n\nYou can set the name by the autoname property of the DocType.\n\n1. field:[fieldname]\n\nThe doc name is fetched from the value of the field provided.\n\n2. [series]\n\nYou can provide a naming pattern which will be incremented automatically. For e.g, if you set it as PRE.#####, the first document created will have the name as PRE00001, and second one will be PRE00002 and so on.\n\n3. naming_series:\n\nThe naming pattern is derived from a field in the document. For e.g, you have a field naming_series in your document and it's value is set as PRE.#####, then that will be the pattern used for generating the name. This value can change per document. So the next document can have a different pattern.\n\n This works only if you have a field called naming_series in your DocType.\n\n4. Prompt\n\nIf you set it as Prompt, the name is required to be filled in manually.\n\n5. Format\n\nThis is the most flexible one when it comes to configuring your naming schemes.\n\nLet's say we have\n\nEXAMPLE-{MM}-test-{fieldname1}-{fieldname2}-{#####}\n\nEverything outside the curly braces are plain text. Keywords inside the curly braces will be evaluated based on what they represent. In this case:\n\nMM: will be replaced by the current month\nfieldname1: will be replaced by the value of fieldname1 in the document\n#####: will generate a series, which starts with 00001\n\nSo the final name may look like, EXAMPLE-02-test-value1-value2-00001\n\nBy Controller Method\n\nYou can also define a name programatically by declaring an autoname method in the controller class. Example\n\nfrom frappe.model.naming import getseries\n\nclass Project(Document):\n def autoname(self):\n # select a project name based on customer\n prefix = `P-{}-`.format(self.customer)\n self.name = getseries(prefix, 3)\n\nBy Document Naming Rule\n\nYou can also create rules for naming DocTypes by creating Document Naming Rule\n\nYou can create multiple Document Naming Rules for a particular doctype that can be applied selectively based on filters.\n\nTo define a Document Naming Rule you have to specify\n\nDocument Type it is being applied on\nPriority of the rule (rules with higher priority will be applied first)\nConditions to apply the rule\nNaming Rules\n\nNumbering\n\nYou can define various numbering prefixes for the rule based on the conditions defined. This is done by setting a prefix and the number of digits for that rule.\n\nFor example if you are creating a separate numbering for high priority todos:\n\nPrefix: todo-high-\nDigits: 3\n\nWill lead to numbering like todo-high-001, todo-high-002 and so on.\n\nPriority of Naming\n\nNaming priority is as follows\n\nDocument Naming Rule\nautoname controller method.\nautoname DocType property\n\nSpecial Rules\n\nChild DocTypes do not follow naming rules\nAmended documents have a suffix (-1, -2 etc) to the original document",
  "scrapedAt": "2025-10-22T00:01:29.463Z"
}