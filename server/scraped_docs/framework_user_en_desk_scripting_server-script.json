{
  "route": "framework/user/en/desk/scripting/server-script",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/desk/scripting/server-script",
  "title": "server-script",
  "content": "Note: Starting from version 15, Server Scripts are disabled by default to improve security on shared benches.\n \n You can enable them on your bench using following command.\n\nbench set-config -g server_script_enabled 1\n\n \n If you're hosted on Frappe Cloud you need to create a private bench in order to enable server scripts. Public shared benches DO NOT allow use of server scripts.\n\nA Server Script lets you dynamically define a Python Script that is executed on the server on a document event or API\n\n1. How to create a Server Script\n\nTo create a Server Script\n\nIf your site is being hosted on erpnext.com, contact support to activate Server Script. In case of self-hosted accounts, set server_script_enabled as true in site_config.json of your site.\nTo add/edit Server Script, ensure your role is System Manager.\nType \"New Server Script\" in the awesomebar and hit enter to create a new Server Script document.\nSet the type of server script (Document Event / API).\nSet the document type and event name, or method name, script and save.\n\n2. Features\n\n2.1 Enabling Server Script\n\nServer script must be enabled via site_config.json\n\nbench --site site1.local set-config server_script_enabled true\n\n2.2 Document Events\n\nFor scripts that are to be called via document events, you must set the Reference Document Type and Event Name to define the trigger\n\nBefore Insert\nAfter Insert\nBefore Validate\nBefore Save\nAfter Save\nBefore Submit\nAfter Submit\nBefore Cancel\nAfter Cancel\nBefore Delete\nAfter Delete\nBefore Save (Submitted Document)\nAfter Save (Submitted Document)\nBefore Print\n\n2.3 API Scripts\n\nAPI endpoints can be created on the fly by using the Script Type \"API\". The name of the endpoint depends on field API Method. All APIs created using Server Scripts will be automatically prefixed with /api/method.\n\nFor instance, a script with the API Method \"delete-note\" may be accessed via /api/method/delete-note. Using Frappe's frontend request library, you could use frappe.call(\"delete-note\") in your client scripts.\n\nGuest access may be enabled by checking Allow Guest for the created APIs. The response can be set via frappe.response[\"message\"] object.\n\nAPI server scripts also support IP-based rate limiting which you can enable by checking \"Enable Rate Limit\" and specifying how many calls can be made in a given time window.\n\n2.3 Security\n\nFrappe Framework uses the RestrictedPython library to restrict access to methods available for server scripts. Only the safe methods, listed below are available in server scripts.\n\nFor allowed methods, see Script API\n\n2.4 Using Server Scripts as libraries\n\nYou can use a server script as an internal method by setting frappe.flags value in script.\n\n2.5 Comparing changes\n\nYou can diff two versions of server scripts using \"Compare Versions\" button.\n\n \n\n3. Examples\n\n3.1 Change the value of a property before change\n\nScript Type: Before Save\n\nif \"test\" in doc.description:\n doc.status = 'Closed'\n\n3.2 Custom validation\n\nScript Type: \"Before Save\"\n\nif \"validate\" in doc.description:\n raise frappe.ValidationError\n\n3.3. Auto Create To Do\n\nScript Type: \"After Save\"\n\nif doc.allocted_to:\n frappe.get_doc(dict(\n doctype = 'ToDo',\n owner = doc.allocated_to,\n description = doc.subject\n )).insert()\n\n3.4 API\n\nScript Type: API\nMethod Name: test_method\n\nfrappe.response['message'] = \"hello\"\n\nRequest: /api/method/test_method\n\n3.5 Internal Library\n\n New in version 13\n\nCall one (script_1 script from another script_2)\n\nScript 1:\n\nfrappe.flags.my_key = 'my value'\n\nScript 2:\n\nmy_key = run_script('script_1').get('my_key')",
  "scrapedAt": "2025-10-22T00:03:36.281Z"
}