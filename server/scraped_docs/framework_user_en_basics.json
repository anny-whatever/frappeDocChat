{
  "route": "framework/user/en/basics",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/basics",
  "title": "basics",
  "content": "Frappe is a full stack, batteries-included, web framework written in Python and Javascript.\n\nIt is the framework which powers ERPNext. It is pretty generic and can be used to build database driven apps.\n\nMeta-data driven\n\nMeta-data is a first class citizen in Frappe. It is used to generate database tables, design forms and configure a lot of features. Meta-data is stored in a Model which is known as DocType in Frappe.\n\nLet's take an example of a DocType called ToDo. It will contain fields like status, date and description.\n\nHere is what the todo.json may look like:\n\n{\n \"name\": \"ToDo\",\n \"module\": \"Desk\",\n \"field_order\": [\n \"status\",\n \"date\",\n \"description\"\n ],\n \"fields\": [\n {\n \"default\": \"Open\",\n \"fieldname\": \"status\",\n \"fieldtype\": \"Select\",\n \"in_global_search\": 1,\n \"in_list_view\": 1,\n \"in_standard_filter\": 1,\n \"label\": \"Status\",\n \"options\": \"Open\nClosed\"\n },\n {\n \"fieldname\": \"date\",\n \"fieldtype\": \"Date\",\n \"in_standard_filter\": 1,\n \"label\": \"Due Date\"\n },\n {\n \"fieldname\": \"description\",\n \"fieldtype\": \"Text Editor\",\n \"in_global_search\": 1,\n \"label\": \"Description\",\n \"reqd\": 1\n }\n ]\n}\n\nA configuration like this will generate a database table whose schema might look like\n\nMariaDB [_baa0f26509a564b6]> desc tabToDo;\n+-----------------------+--------------+------+-----+---------+-------+\n| Field | Type | Null | Key | Default | Extra |\n+-----------------------+--------------+------+-----+---------+-------+\n| name | varchar(140) | NO | PRI | NULL | |\n| creation | datetime(6) | YES | | NULL | |\n| modified | datetime(6) | YES | MUL | NULL | |\n| modified_by | varchar(140) | YES | | NULL | |\n| owner | varchar(140) | YES | | NULL | |\n| docstatus | int(1) | NO | | 0 | |\n| idx | int(8) | NO | | 0 | |\n| status | varchar(140) | YES | | Open | |\n| description | longtext | YES | | NULL | |\n| date | date | YES | | NULL | |\n+-----------------------+--------------+------+-----+---------+-------+\n\nRich Admin Interface\n\nFrappe does not only manage the backend, it also comes with a feature rich admin interface called the Desk. When you create a DocType in Frappe, a number of views are generated for it. Here are some of them:\n\nThe List View supports paging, filtering, sorting and bulk editing records.\n\n List View\n\nThe Form View used for editing records also supports file attachments, PDF format, comments, email, etc.\n\n Form View\n\nThe Report Builder supports adding columns, grouping, filtering, sorting and saving it as a configuration.\n\n Report Builder\n\nUsers, Roles and Permissions\n\nFrappe comes with User and Role management out of the box. A User is someone who can login to the system and perform authorized actions like creating, updating or deleting records. A Role is a mapping of DocTypes and actions allowed to perform on it.\n\n \n\nPython, JS and MariaDB\n\nFrappe Framework uses Python for the backend. It comes with a simple yet powerful ORM as an abstraction over CRUD operations. The default database is MariaDB. Postgres support is in beta.\n\ndoc = frappe.new_doc('ToDo')\ndoc.description = 'Buy Eggs'\ndoc.insert()\n\nThe front-end is an SPA built using Javascript (jQuery).\n\nRealtime\n\nFrappe also supports realtime pub/sub events using NodeJS and socketio.\n\n# server\nfrappe.publish_realtime('update_progress', {\n 'progress': 42,\n 'total': 100\n})\n\n# client\nfrappe.realtime.on('update_progress', (data) => {\n console.log(data)\n});\n\nBackground Jobs\n\nFrappe also supports background job queuing based on Python RQ.\n\nfrappe.enqueue('frappe.job.run_job', arg1='Test', arg2='Test2')\n\nEmail\n\nFrappe supports sending and receiving emails, which can also be linked to individual documents.\n\n \n\nPrinting\n\nFrappe supports generating PDF print formats based on Jinja Templates. It also comes with a drag-and-drop Print Format Builder.\n\n Print Preview\n\n Print Format Builder\n\nBatteries Included\n\nFrappe has tons of features that are essential to building a modern complex app. Only the basic features are introduced here. The rest of this guide will cover them and other advanced features with much finer detail, so make sure to read it all.",
  "scrapedAt": "2025-10-22T00:01:13.651Z"
}