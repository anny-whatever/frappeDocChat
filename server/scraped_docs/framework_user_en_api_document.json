{
  "route": "framework/user/en/api/document",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/api/document",
  "title": "document",
  "content": "A Document is an instance of a DocType. It is derived from the frappe.model.Document class and represents a single record in the database table.\n\nfrappe.get_doc\n\nfrappe.get_doc(doctype, name)\n\nReturns a Document object of the record identified by doctype and name. If no document is found, a DoesNotExistError is raised. If doctype is a Single DocType name is not required.\n\n# get an existing document\ndoc = frappe.get_doc('Task', 'TASK00002')\ndoc.title = 'Test'\ndoc.save()\n\n# get a single doctype\ndoc = frappe.get_doc('System Settings')\ndoc.timezone # Asia/Kolkata\n\nfrappe.get_doc(dict)\n\nReturns a new Document object in memory which does not exist yet in the database.\n\n# create a new document\ndoc = frappe.get_doc({\n 'doctype': 'Task',\n 'title': 'New Task'\n})\ndoc.insert()\n\nfrappe.get_doc(doctype={document_type}, key1 = value1, key2 = value2, ...)\n\nReturns a new Document object in memory which does not exist yet in the database.\n\n# create new object with keyword arguments\nuser = frappe.get_doc(doctype='User', email_id='test@example.com')\nuser.insert()\n\nfrappe.get_last_doc\n\nfrappe.get_last_doc(doctype, filters, order_by)\n\nReturns the last Document object created under the mentioned doctype.\n\n# get the last Task created\ntask = frappe.get_last_doc('Task')\n\nYou can also specify filters to refine your results. For instance, you can retrieve the last canceled Task by adding a filter.\n\n# get the last available Cancelled Task\ntask = frappe.get_last_doc('Task', filters={\"status\": \"Cancelled\"})\n\nBy default, the order_by argument is set to creation desc, but this value can be overridden to use other non-standard fields that can serve the same purpose. For instance, you have a field timestamp under the Task DocType that tracks the time it was approved or marked valid instead of the time it was created.\n\n# get the last Task created based on a non-standard field\ntask = frappe.get_last_doc('Task', filters={\"Status\": \"Cancelled\"}, order_by=\"timestamp desc\")\n\nAlternatively, you can choose to go completely against all of this and as a part of a joke change it to \"creation asc\" to retrieve the first document instead.\n\nfrappe.get_cached_doc\n\nSimilar to frappe.get_doc but will look up the document in cache first before hitting the database.\n\nfrappe.new_doc\n\nfrappe.new_doc(doctype)\n\nAlternative way to create a new Document.\n\n# create a new document\ndoc = frappe.new_doc('Task')\ndoc.title = 'New Task 2'\ndoc.insert()\n\nfrappe.delete_doc\n\nfrappe.delete_doc(doctype, name)\n\nDeletes the record and its children from the database. Also deletes other documents like Communication, Comments, etc linked to it.\n\nfrappe.delete_doc('Task', 'TASK00002')\n\nfrappe.rename_doc\n\nfrappe.rename_doc(doctype, old_name, new_name, merge=False)\n\nRename a document's name (primary key) from old_name to new_name. If merge is True and a record with new_name exists, will merge the record with it.\n\nfrappe.rename_doc('Task', 'TASK00002', 'TASK00003')\n\n Rename will only work if Allow Rename is set in the DocType Form.\n\nfrappe.get_meta\n\nfrappe.get_meta(doctype)\n\nReturns meta information of doctype. This will also apply custom fields and property setters.\n\nmeta = frappe.get_meta('Task')\nmeta.has_field('status') # True\nmeta.get_custom_fields() # [field1, field2, ..]\n\nTo get the original document of DocType (without custom fields and property setters) use frappe.get_doc('DocType', doctype_name)\n\nDocument Methods\n\nThis section lists out common methods that are available on the doc object.\n\ndoc.insert\n\nThis method inserts a new document into the database table. It will check for user permissions and execute before_insert, validate, on_update, after_insert methods if they are written in the controller.\n\nIt has some escape hatches that can be used to skip certain checks explained below.\n\ndoc.insert(\n ignore_permissions=True, # ignore write permissions during insert\n ignore_links=True, # ignore Link validation in the document\n ignore_if_duplicate=True, # dont insert if DuplicateEntryError is thrown\n ignore_mandatory=True # insert even if mandatory fields are not set\n)\n\ndoc.save\n\nThis method saves changes to an existing document. This will check for user permissions and execute validate before updating and on_update after updating values.\n\ndoc.save(\n ignore_permissions=True, # ignore write permissions during insert\n ignore_version=True # do not create a version record\n)\n\ndoc.delete\n\nDelete the document record from the database table. This method is an alias to frappe.delete_doc.\n\ndoc.delete()\n\ndoc.get_doc_before_save\n\nWill return a version of the doc before the changes were made. You can use it to compare what changed from the last version.\n\nold_doc = doc.get_doc_before_save()\nif old_doc.price != doc.price:\n # price changed\n pass\n\ndoc.has_value_changed\n\nWill return True if the value of the given field was changed before and after saving.\n\nprice_changed = doc.has_value_changed(\"price\")\n\nif price_changed:\n pass\n\ndoc.reload\n\nWill get the latest values from the database and update the doc state.\n\nWhen you are working with a document, it may happen that some other part of code updates the value of some field directly in the database. In such cases you can use this method to reload the doc.\n\ndoc.reload()\n\ndoc.check_permission\n\nThrow if the current user has no permission for the provided permtype.\n\ndoc.check_permission(permtype='write') # throws if no write permission\n\ndoc.get_title\n\nGet the document title based on title_field or field named title or name.\n\ntitle = doc.get_title()\n\ndoc.notify_update\n\nPublish realtime event to indicate that the document has been modified. Client side event handlers react to this event by updating the form.\n\ndoc.notify_update()\n\ndoc.db_set\n\nSet a field value of the document directly in the database and update the modified timestamp.\n\n This method does not trigger controller validations and should be used very carefully.\n\n# updates value in database, updates the modified timestamp\ndoc.db_set('price', 2300)\n\n# updates value in database, will trigger doc.notify_update()\ndoc.db_set('price', 2300, notify=True)\n\n# updates value in database, will also run frappe.db.commit()\ndoc.db_set('price', 2300, commit=True)\n\n# updates value in database, does not update the modified timestamp\ndoc.db_set('price', 2300, update_modified=False)\n\ndoc.append\n\nAppend a new item to a child table.\n\ndoc.append(\"childtable\", {\n \"child_table_field\": \"value\",\n \"child_table_int_field\": 0,\n ...\n})\n\ndoc.get_url\n\nReturns Desk URL for this document. For e.g: /app/task/TASK00002\n\nurl = doc.get_url()\n\ndoc.add_comment\n\nAdd a comment to this document. Will show up in timeline in Form view.\n\n# add a simple comment\ndoc.add_comment('Comment', text='Test Comment')\n\n# add a comment of type Edit\ndoc.add_comment('Edit', 'Values changed')\n\n# add a comment of type Shared\ndoc.add_comment(\"Shared\", \"{0} shared this document with everyone\".format(user))\n\ndoc.add_seen\n\nAdd the given/current user to list of users who have seen this document. Will update the _seen column in the table. It is stored as a JSON Array.\n\n# add john to list of seen\ndoc.add_seen('john@doe.com')\n\n# add session user to list of seen\ndoc.add_seen()\n\n This works only if Track Seen is enabled in the DocType.\n\ndoc.add_viewed\n\nAdd a view log when a user views a document i.e opens the Form.\n\n# add a view log by john\ndoc.add_viewed('john@doe.com')\n\n# add a view log by session user\ndoc.add_viewed()\n\n This works only if Track Views is enabled in the DocType.\n\ndoc.add_tag\n\nAdd a tag to a document. Tags are generally used to filter and group documents.\n\n# add tags\ndoc.add_tag('developer')\ndoc.add_tag('frontend')\n\ndoc.get_tags\n\nReturns a list of tags associated with the specific document.\n\n# get all tags\ndoc.get_tags()\n\ndoc.run_method\n\nRun method if defined in controller, will also trigger hooks if defined.\n\ndoc.run_method('validate')\n\ndoc.queue_action\n\nRun a controller method in background. If the method has an inner function, like _submit for submit, it will call that method instead.\n\ndoc.queue_action('send_emails', emails=email_list, message='Howdy')\n\ndoc.get_children()\n\n Only available on tree DocTypes (inherited from NestedSet).\n\nReturns a generator that yields an instance of NestedSet for each child record.\n\nfor child_doc in doc.get_children():\n print(child_doc.name)\n\nIt can also be applied recursively:\n\nfor child_doc in doc.get_children():\n print(child_doc.name)\n for grandchild_doc in child_doc.get_children():\n print(grandchild_doc.name)\n\ndoc.get_parent()\n\n Only available on tree DocTypes (inherited from NestedSet).\n\nReturns an instance of NestedSet for the parent record.\n\nparent_doc = doc.get_parent()\ngrandparent_doc = parent_doc.get_parent()\n\ndoc.db_insert()\n\nSerialize and insert a document into database. Warning: This bypasses all validations and controller methods that might be required to run before and after inserting. When in doubt use doc.insert() instead.\n\ndoc = frappe.get_doc(doctype=\"Controller\", data=\"\")\ndoc.db_insert()\n\ndoc.db_update()\n\nSerialize and update a document into database. Warning: This bypasses all validations and controller methods that might be required to run before and after updating. When in doubt use doc.save() instead.\n\ndoc = frappe.get_last_doc(\"User\")\ndoc.last_active = now()\ndoc.db_update()",
  "scrapedAt": "2025-10-22T00:01:42.851Z"
}