{
  "route": "framework/user/en/database-migrations",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/database-migrations",
  "title": "A project often undergoes changes related to database schema during course of",
  "content": "A project often undergoes changes related to database schema during course of\nits development. It may also require patching of existing data. Frappe comes\nwith a migration and patch system tools to handle these scenarios.\n\nWhen there are schema changes in your app, to migrate your existing site's\ndatabase to the new schema, you should run the command.\n\nbench --site [sitename] migrate\n\nSchema changes\n\nYou can edit a DocType to add, remove or change fields. On saving a DocType, a\nJSON file containing the DocType data is added to source tree of your app. When\nyou add an app to a site, the DocTypes are installed (database tables are\ncreated) using this JSON file.\n\n For making schema changes, you must enable Developer Mode.\n\nOn running a migrate, all apps migrate to their current version. First, we run the \"before_migrate\" hook to sync user permissions. Then the actual patches are run, which migrate the various apps. After this, we sync the following components:\n\nDatabase Schema\nBackground Jobs\nFixtures (read more)\nDashboards, Desktop Icons and Web Pages\nUpdates Translations\nRebuild Search Index for all routes\n\nParticularly for DocTypes, we compare the MD5 hash of each DocType JSON with the hashes we have stored in the DocType database table. If the hashes don't match, we reload the particular DocType. This technique is called checksum comparison, you can learn more about it here. Finally, we run a \"after_migrate\" hook to finish the migration. You can find the commands run for the individual processes at bench-site-commands\n\n Note: Up Until v13 DocTypes were synced based on the modified timestamps in the JSON file. This method was error-prone so we moved to the more robust hash comparison method. You can read more about it here\n\nWhen you remove or rename fields in the DocType, the corresponding database\ncolumns are not removed from the database table, but they will not be visible in\nthe form view. This is done to avoid any potential data loss situations and to\nallow you write related data migrations (patches) which might need values from\nold fields.\n\n Frappe doesn't support reverse schema migrations.\n\nData Migrations\n\nOn introducing data related changes, you might want to run one off scripts to\nchange existing data to match expectations as per new code. We call these scripts patch in frappe.\n\nWriting a patch\n\nTo write a patch, you must write an execute method in a python script and add\nit to patches.txt of your app.\n\nIt is recommended to make a file with a patch number and name in its path and\nadd it to a patches package (directory) in your app. You can then add a line\nwith dotted path to the patch module to patches.txt.\n\nThe directory structure followed in Frappe is as below\n\nfrappe\n└── patches\n └── v12_0\n └── my_awesome_patch.py\n\nThe patch can then be added to patches.txt by its dotted path.\n\nfrappe.patches.v12_0.my_awesome_patch\n\nSchema during patch\n\nThe DocType meta available in the execute function will be as per the old JSON.\nThis is so that you can write migration code assuming you still have the old fields.\nAfter the patch is run, the new schema is applied to the DocType.\n\nIf you want to have the new schema during your patch execution, use the reload_doc method.\n\nimport frappe\n\ndef execute():\n frappe.reload_doc(module_name, \"doctype\", doctype_name)\n\n # your patch code here\n\nPost-Model sync patches [v14 / develop branch only]\n\nOften your patch might not require access to database schema before DocType models are synced with database. In such cases it's better to keep the patch in [post_model_sync] section of patches.txt. \n\npatches.txt supports INI-like file format where two sections specify when a patch should run - before or after doctype schema migration. Post model sync patches do not require reloading any doctypes as all doctypes are reloaded before executing them. Here is example of such patches.txt file:\n\n[pre_model_sync]\napp.module.patch1\napp.module.patch2\n\n[post_model_sync]\napp.module.patch3\napp.module.patch4\n\nOne off Python statements\n\nYou can also add one off python statements in patches.txt using the syntax,\n\nfrappe.patches.v12_0.my_awesome_patch\nexecute:frappe.delete_doc('Page', 'applications', ignore_missing=True)\n\nPatch execution order\n\nPatches run in the order they are defined. All lines in patches.txt have to be\nunique. If a patch has been run before, it won't run again. If you want to run a\npatch again, add a comment that will make the line appear as new.\n\nFor example,\n\nfrappe.patches.v12_0.my_awesome_patch #2019-09-08",
  "scrapedAt": "2025-10-22T00:04:38.128Z"
}