{
  "route": "framework/user/en/basics/doctypes/controllers",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/basics/doctypes/controllers",
  "title": "controllers",
  "content": "A Controller is a normal Python class which extends from frappe.model.Document base class. This base class is the core logic of a DocType. It handles how values are loaded from the database, how they are parsed and saved back to the database.\n\nWhen you create a DocType named Person, a python file is created by the name person.py and the contents look like:\n\nimport frappe\nfrom frappe.model.document import Document\n\nclass Person(Document):\n pass\n\nAll the fields are available to the class as attributes.\n\nController Methods\n\nYou can add custom methods to your Controller and it will be callable using the doc object. For example,\n\n# controller class\nclass Person(Document):\n def get_full_name(self):\n \"\"\"Returns the person's full name\"\"\"\n return f\"{self.first_name} {self.last_name}\"\n\n# somewhere in your code\n>>> doc = frappe.get_doc(\"Person\", \"000001\")\n>>> doc.get_full_name()\nJohn Doe\n\nController Hooks\n\nTo add custom behaviour during the lifecycle of a document, we have controller hooks.\n\n Method Name\n Description\n Insert\n Save\n Submit\n Cancel\n Update after submit\n\n before_insert\n This is called before a document is prepared for insertion.\n X\n \n \n \n \n\n before_naming\n This is called before the name property of the document is set.\n X\n \n \n \n \n\n autoname\n If defined in the controller, this method is used to set name property of the document.\n X\n \n \n \n \n\n before_validate\n This hook is called before validation, use this for auto setting missing values.\n X\n X\n X\n \n \n\n validate\n Use this method to throw any validation errors and prevent the document from saving.\n X\n X\n X\n \n \n\n before_save\n This method is called before the document is saved.\n X\n X\n \n \n \n\n before_submit\n This method is called before the document is submitted.\n X\n \n X\n \n \n\n before_cancel\n This method is called before the document is cancelled.\n \n \n \n X\n \n\n before_update_after_submit\n This method is called when doc fields are updated on submitted document.\n \n \n \n \n X\n\n db_insert\n This method inserts document in database, do not override this unless you're working on virtual DocType.\n X\n \n \n \n \n\n after_insert\n This is called after the document is inserted into the database.\n X\n \n \n \n \n\n db_update\n This method updates document in database, do not override this unless you're working on virtual DocType.\n \n X\n X\n X\n X\n\n on_update\n This is called when values of an existing document is updated.\n X\n X\n X\n \n \n\n on_submit\n This is called when a document is submitted.\n \n \n X\n \n \n\n on_cancel\n This is called when a submitted document is cancelled.\n \n \n \n X\n \n\n on_update_after_submit\n This is called when a submitted document values are updated.\n \n \n \n \n X\n\n on_change\n This is called when a document's values has been changed. This method is also called when db_set is performed, so operation performed in this method should be idempotent.\n X\n X\n X\n X\n X\n\nApart from doc events for typical actions, you can also hook into other actions.\n\n Method Name\n Description\n\n before_rename\n This is called before a document is renamed.\n\n after_rename\n This is called after a document is renamed.\n\n on_trash\n This is called when a document is being deleted.\n\n after_delete\n This is called after a document has been deleted.\n\nTo use a controller hook, just define a class method with that name. For e.g\n\nclass Person(Document):\n def validate(self):\n if self.age <= 18:\n frappe.throw(\"Person's age must be at least 18\")\n\n def after_insert(self):\n frappe.sendmail(recipients=[self.email], message=\"Thank you for registering!\")\n\nYou can also override the pre-defined document methods to add your own behaviour if the hooks aren't enough for you. For e.g to override the save() method,\n\nclass Person(Document):\n def save(self, *args, **kwargs):\n super().save(*args, **kwargs) # call the base save method\n do_something() # eg: trigger an API call or a Rotating File Logger that \"User X has tried updating this particular record\"\n\nThere are a lot of methods provided by default on the doc object. You can find the complete list here.\n\n1. Create a document\n\nTo create a new document and save it to the database,\n\ndoc = frappe.get_doc({\n 'doctype': 'Person',\n 'first_name': 'John',\n 'last_name': 'Doe'\n})\ndoc.insert()\n\ndoc.name # 000001\n\n2. Load a document\n\nTo get an existing document from the database,\n\ndoc = frappe.get_doc('Person', '000001')\n\n# doctype fields\ndoc.first_name # John\ndoc.last_name # Doe\n\n# standard fields\ndoc.creation # datetime.datetime(2018, 9, 20, 12, 39, 34, 236801)\ndoc.owner # john.doe@frappeframework.com\n\nDocument\n\nA Document is an instance of a DocType. It usually maps to a single row in the database table. We refer to it as doc in code.\n\nExample\n\nLet's say we have a DocType ToDo with the following fields:\n\ndescription\nstatus\npriority\n\nNow, if we want to query a document from the database, we can use the ORM.\n\n>>> doc = frappe.get_doc(\"ToDo\", \"0000001\")\n<todo: 0000001=\"\">\n\n>>> doc.as_dict()\n{'name': '0000001',\n 'owner': 'Administrator',\n 'creation': datetime.datetime(2022, 3, 28, 18, 20, 23, 275229),\n 'modified': datetime.datetime(2022, 3, 28, 18, 20, 23, 275229),\n 'modified_by': 'Administrator',\n 'docstatus': 0,\n 'idx': 0,\n 'status': 'Open',\n 'priority': 'Medium',\n 'color': None,\n 'date': None,\n 'allocated_to': None,\n 'description': 'Test',\n 'reference_type': None,\n 'reference_name': None,\n 'role': None,\n 'assigned_by': 'Administrator',\n 'assigned_by_full_name': 'Administrator',\n 'sender': None,\n 'assignment_rule': None,\n 'doctype': 'ToDo'}\n\nYou get the values of description, status and priority, but you also get fields like creation, owner and modified_by which are fields added by default by the framework on all docs.\n\nType Annotations\n\n Introduced in Version 15.\n\nFrappe support automatically generating Python type annotations in controller files. These annotations can be used for auto-completion, reference and type-checking inside the controller file.\n\nclass Person(Document):\n # begin: auto-generated types\n # This code is auto-generated. Do not modify anything in this block.\n\n from typing import TYPE_CHECKING\n\n if TYPE_CHECKING:\n from frappe.types import DF\n\n first_name: DF.Data\n last_name: DF.Data \n user: DF.Link\n # end: auto-generated types\n pass\n\nNote: These annotations are generated when creating or updating doctypes. If you modify the code block, it will get overridden on the next update.\n\nYou can configure automatic exporting in your app by adding the following hook.\n\n# hooks.py\n\nexport_python_type_annotations = True\n\nLearn more about type annotations:\n\nhttps://docs.python.org/3/library/typing.html\nVS Code users can install Python extension for better auto-complete - https://code.visualstudio.com/docs/languages/python\nMost other editors have an equivalent plugin system using LSP.",
  "scrapedAt": "2025-10-22T00:01:31.676Z"
}