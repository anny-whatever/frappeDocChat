{
  "route": "framework/user/en/customize-geolocation-map",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/customize-geolocation-map",
  "title": "customize-geolocation-map",
  "content": "If you want to show a map in your DocType Form, you can add a field of type \"Geolocation\". By default, it looks like this:\n\n \n\nThere are many ways to customize this field. We can change global values like the default location and zoom level. And we can customize how individual objects on a particular map are rendered.\n\nChange the map defaults\n\n Note: these changes require a custom app and will apply to all maps in your system.\n\nBy default, it shows a street map centered on Mumbai. This is not configurable via the GUI yet. But, using a custom app, we can change the map type, start location, zoom level, etc.\n\nStart by creating a file $MY_APP/$MY_APP/public/js/map_defaults.js. In your $MY_APP/$MY_APP/hooks.py, add the JS file into the app_include_js hook:\n\napp_include_js = [\n \"/assets/$MY_APP/js/map_defaults.js\"\n # ...\n]\n\nNow, frappe will load this file for all desk views (i.e. for logged in system users).\n\nIn map_defaults.js, we add the following lines:\n\n// Make sure we have a dictionary to add our custom settings\nconst map_settings = frappe.provide(\"frappe.utils.map_defaults\");\n\n// Center and zoomlevel can be copied from the URL of\n// the map view at openstreetmap.org.\n\n// New default location (middle of germany).\nmap_settings.center = [51.57, 9.866];\n// new zoomlevel: see the whole country, not just a single city\nmap_settings.zoom = 6;\n\n// Use a different map: satellite instead of streets\n// Examples can be found at https://leaflet-extras.github.io/leaflet-providers/preview/\nmap_settings.tiles = \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\";\nmap_settings.attribution = \"Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\";\n\nRestart your bench and reload your browser window. Now you should see the customized map:\n\n \n\nChange how a particular map is rendered\n\nIn order to change the look and feel of a particular map, you can overwrite the controller methods of the Geolocation field. This can be done with a Client Script or with the hook in a custom app.\n\nBy default, everything drawn on the map is blue. Let's overwrite the method on_each_feature to make all polygons red:\n\nfrappe.ui.form.on(\"My Doctype\", {\n setup(frm) {\n frm.fields_dict.MY_MAP_FIELD.on_each_feature = function(feature, layer) {\n if (feature.geometry.type == \"Polygon\") {\n layer.setStyle({color: \"red\"});\n }\n };\n }\n});\n\nThe result looks like this:\n\n \n\nOther methods that can be overwritten include point_to_layer and set_style. Read more about these methods in the Leaflet documentation.",
  "scrapedAt": "2025-10-22T00:02:48.101Z"
}