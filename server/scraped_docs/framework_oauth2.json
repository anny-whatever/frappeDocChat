{
  "route": "framework/oauth2",
  "sourceUrl": "https://docs.frappe.io/framework/oauth2",
  "title": "oauth2",
  "content": "Frappe Framwork uses oauthlib to manage OAuth2 requirements. A Frappe instance can function as all of these:\n\nResource Server: contains resources, for example the data in your DocTypes.\nAuthorization Server: server that issues tokens to access some resource.\nClient: app that requires access to some resource on a resource server.\n\nDocTypes pertaining to the above roles:\n\nCommon\n\nOAuth Settings: allows configuring certain OAuth features pertaining to the three roles.\n\nAuthorization Server\n\nOAuth Client: keeps records of clients registered with the frappe instance.\nOAuth Bearer Token: tokens given out to registered clients are maintained here.\nOAuth Authorization Code: keeps track of OAuth codes a client responds with in exchange for a token.\nOAuth Provider Settings: allows skipping authorization. [DEPRECATED] use OAuth Settings instead.\n\nClient\n\nConnected App: keeps records of authorization servers against whom this frappe instance is registered as a client so some resource can be accessed. Eg. a users Google Drive account.\nSocial Key Login: similar to Connected App, but for the purpose of logging into the frappe instance. Eg. a users Google account to enable \"Login with Google\".\nToken Cache: tokens received by the Frappe instance when accessing a Connected App.\n\nFeatures\n\nAdditional features over oauthlib that have implemented in the Framework:\n\nDynamic Client Registration: allows a client to register itself without manual configuration by the resource owner. RFC7591\nAuthorization Server Metadata Discovery: allows a client to view the instance's auth server (itself) metadata such as auth end points. RFC8414\nResource Server Metadata Discovery: allows a client to view the instance's resource server metadata such as documentation, auth servers, etc. RFC9728\n\nAdditional Docs\n\nDocumentation of various OAuth2 features:\n\nHow to setup OAuth 2?\nOAuth 2\nToken Based Authentication\nUsing Frappe as OAuth Service\nSocial Login Key\nConnected App\n\n Warning\n \n Some of these pages might be outdated, it is always recommended to check the\n code when in doubt.\n\nOAuth Settings\n\nA Single doctype that allows configuring OAuth2 related features. It is\nrecommended to open the DocType page itself as each field has a\nsufficiently descriptive help text.\n\nThe settings allow toggling the following features:\n\nAuthorization check when active token is present using the Skip Authorization field. Note: Keep this unchecked in production.\nAuthorization Server Metadata Discovery: by toggling the Show Auth Server Metadata field.\nDynamic Client Registration: by toggling the Enable Dynamic Client Registration field.\nResource Server Metadata Discovery: by toggling the Show Protected Resource Metadata.\n\nThe remaining fields (in the Resource section) are used only when responding to requests on /.well-known/oauth-protected-resource\n\n Regarding Public Clients\n \n Public clients, for example an SPA, have restricted access by default. This\n restriction is applied by use of CORS.\n \n To side-step this restriction for certain trusted clients, you may add their\n hostnames to the Allowed Public Client Origins field.",
  "scrapedAt": "2025-10-22T00:04:00.965Z"
}