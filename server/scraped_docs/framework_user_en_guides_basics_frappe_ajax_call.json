{
  "route": "framework/user/en/guides/basics/frappe_ajax_call",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/guides/basics/frappe_ajax_call",
  "title": "frappe_ajax_call",
  "content": "In Frappe Framework, you can manage ajax calls via frappe.call. The frappe.call works in asynchronous manner ie. send requests and handle response via callback mechanism.\n\nfrappe.call Structure\n\nfrappe.call({\n method: \"\",\n type: \"POST\",\n args: {},\n success: function(r) {},\n error: function(r) {},\n always: function(r) {},\n btn: opts.btn,\n freeze: false,\n freeze_message: \"\",\n async: true,\n url: \"\" || frappe.request.url,\n});\n\nParameter description\n\nmethod: dotted path to a whitelisted backend method\ntype: String parameter, http request type \"GET\", \"POST\", \"PUT\", \"DELETE\". Default set to \"POST\".\nargs: associative array, arguments that will pass with request.\nsuccess: Function parameter, code snippet, will after successful execution of request\nerror: Function parameter, code snippet, will execute after request failure\nalways: Function parameter, code snipper, will execute in either case\nbtn: Object parameter, triggering object\nfreeze: Boolean parameter, if set freeze the instance until it receives response\nfreeze_message: String parameter, message will populate to screen while screen is in freeze state.\nasync: Boolean parameter, default set to true. So each frappe.call is asynchronous. To make call synchronous set parameter value as false\nurl: String parameter, location from where hitting the request\n\nHow to use frappe.call ?\n\nCalling standard API\n\nfrappe.call({\n method: 'frappe.client.get_value',\n args: {\n 'doctype': 'Item',\n 'filters': {'name': item_code},\n 'fieldname': [\n 'item_name',\n 'web_long_description',\n 'description',\n 'image',\n 'thumbnail'\n ]\n },\n callback: function(r) {\n if (!r.exc) {\n // code snippet\n }\n }\n});\n\nParam description:\n\ndoctype: name of doctype for which you want to pull information\nfilters: condition specifier\nfieldname: you can specify fields in array that you want back in response\n\nCalling whitelisted methods\n\nOn the client side we specify the server side method to be called. This is a dotted path through the python modules on the server side, where the last part is the method name.\n\nfrappe.call({\nmethod: \"frappe.core.doctype.user.user.get_all_roles\", //dotted path to server method\ncallback: function(r) {\n// code snippet\n}\n});\n\nThe above request calls the server-side method get_all_roles, located in the file $MY_BENCH/apps/frappe/frappe/core/doctype/user/user.py:\n\n@frappe.whitelist()\ndef get_all_roles():\n// business logic\nreturn value\n\n Note: any server side method that should be accessed via frappe.call() needs to be whitelisted, by using the decorator @frappe.whitelist().",
  "scrapedAt": "2025-10-22T00:02:17.765Z"
}