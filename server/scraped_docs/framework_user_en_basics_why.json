{
  "route": "framework/user/en/basics/why",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/basics/why",
  "title": "why",
  "content": "Frappe was built to power our flagship product ERPNext.\nThe core philosophy at Frappe is write as less code as possible. We prefer\nconfiguration over code. If a feature is generic and we need it, we put it right\ninto the framework.\n\nThis has enabled us to build and maintain a complex application like an ERP\nwhich has thousands of features with a small team of developers.\n\nRapid Application Development\n\nAfter setting up Frappe Framework, you can be productive in no time. Creating\nmodels, wiring controller code and updating views are all handled by the\nframework.\n\nBatteries Included\n\nAnything that might be needed by a modern web application is probably built into\nthe framework already. PDF generation, Emails, SMS, Web Pages\nyou name it. If there is something missing in Frappe Framework, we might already\nbe working on it right now :)\n\nEasy Deployment\n\nBench is the all-in-one tool to manage all things Frappe. It handles app\nupdates, database migrations, generating configs for nginx and supervisor,\nscaffolding new apps and much more.\n\nMulti Tenant\n\nBench supports multi-tenancy out of the box. It means you can spin up multiple\ninstances of apps with separate databases on the same codebase. It also supports\nport-based multitenancy where you can set up multiple bench environments for\ndifferent versions of apps.\n\nExtensible architecture\n\nBuild powerful extensions on top of Frappe by creating your own apps. Apps can\nbring their own models or modify existing ones in Frappe.",
  "scrapedAt": "2025-10-22T00:01:14.745Z"
}