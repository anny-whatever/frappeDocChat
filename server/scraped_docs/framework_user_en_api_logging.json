{
  "route": "framework/user/en/api/logging",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/api/logging",
  "title": "logging",
  "content": "Logging is a means of tracking events that happen when some software runs. Under the bench architecture, with multitenancy, it might get really complicated really fast to track down and eliminate any uncertainties. You may wan't to log events along with circumstantial, variable data.\n\nFrappe implements Python's logging module to maintain bench and site wise logs. Version 13 uses Log Rotation to maintain the last 20 files along with the current running of 100kB each for the out of the box log files.\n\nfrappe.log_level\n\nMaintains the log level of Frappe processes. To learn more about logging levels, you can check out Python's documentation.\n\nfrappe.utils.logger.set_log_level\n\nfrappe.utils.logger.set_log_level(level) can be used to set the log level and regenerate the loggers dynamically.\n\nfrappe.loggers\n\nfrappe.loggers maintains a dict of active loggers in your process. The key is the name of the logger, typically \"{module}-{site}\" and the value holds the Logger instance.\n\nA web worker may have frappe.loggers such as the following if docs.erpnext.com and frappeframework.com are the sites on the bench.\n\n{\n \"frappe.web-docs.erpnext.com\": <logger frappe.web-docs.erpnext.com=\"\" (debug)=\"\">,\n \"frappe.web-frappeframework.com\": <logger frappe.web-frappeframework.com=\"\" (debug)=\"\">\n}\n\nfrappe.logger\n\nfrappe.logger(module, with_more_info, allow_site, filter, max_size, file_count)\n\nReturns a logging.Logger object with Site and Bench level logging capabilities. If logger doesn't already exist, creates and updatesfrappe.loggers.\n\nArguments:\n\nmodule: Name of your logger and consequently your log file.\nwith_more_info: Will log the Form Dict as additional information, typically useful for requests.\nallow_site: Pass site name to explicitly log under it's logs. If True and unspecified, guesses which site the logs would be saved under.\nfilter: Add a filter function for your logger.\nmax_size: Max file size of each log file in bytes.\nfile_count: Max count of log files to be retained via Log Rotation.\n\nUsage\n\nfrappe.logger(\"frappe.web\").debug({\n \"site\": \"frappeframework.com\",\n \"remote_addr\": \"192.148.1.7\",\n \"base_url\": \"https://frappeframework.com/docs/v14/user/en/api/logging\",\n \"full_path\": \"/docs/v14/user/en/api/logging\",\n \"method\": \"POST\",\n \"scheme\": \"https\",\n \"http_status_code\": 200\n})\n\n2020-07-31 16:06:55,067 DEBUG frappe.web {'site': 'frappeframework.com', 'remote_addr': '192.148.1.7', 'base_url': 'https://frappeframework.com/docs/v14/user/en/api/logging', 'full_path': '/docs/v14/user/en/api/logging', 'method': 'POST', 'scheme': 'https', 'http_status_code': 200}\n\nThe above entry would be logged under ./logs/frappe.web.log and ./sites/frappeframework.com/logs/frappe.web.log files.\n\n Usage specified as implemented in app.py#L102-L110\n\nExample\n\nConsider a scenario where you've written an API for updating a counter with the value sent by the user and return the updated value. Now you want to log information in the API, to make sure it's working as expected. So, you create a logger api to track events for the same.\n\nfrappe.utils.logger.set_log_level(\"DEBUG\")\nlogger = frappe.logger(\"api\", allow_site=True, file_count=50)\n\n@frappe.whitelist()\ndef update(value):\n user = frappe.session.user\n logger.info(f\"{user} accessed counter_app.update with value={value}\")\n\n current_value = frappe.get_single_value(\"Value\", \"counter\")\n updated_value = current_value + value\n logger.debug(f\"{current_value} + {value} = {updated_value}\")\n frappe.db.set_value(\"Value\", \"Value\", \"counter\", updated_value)\n logger.info(f\"{user} updated value to {value}\")\n\n return updated_value\n\nAPI calls made to this endpoint will now start getting logged in your api.log as follows\n\n2020-07-31 16:06:55,067 INFO api gavin@frappe.io accessed counter_app.update with value 100\n2020-07-31 16:06:55,067 DEBUG api 1000 + 100 = 1100\n2020-07-31 16:06:55,068 INFO api gavin@frappe.io updated value to 1100\n\n Learn more about Logging in Frappe here",
  "scrapedAt": "2025-10-22T00:02:09.617Z"
}