{
  "route": "framework/user/en/basics/directory-structure",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/basics/directory-structure",
  "title": "When you initialize a new frappe-bench directory, you will have a directory",
  "content": "When you initialize a new frappe-bench directory, you will have a directory\nstructure similar to:\n\n.\n├── apps\n ├── frappe\n├── config\n ├── redis_cache.conf\n ├── redis_queue.conf\n └── redis_socketio.conf\n├── env\n├── logs\n├── Procfile\n└── sites\n ├── apps.txt\n ├── assets\n ├── common_site_config.json\n └── site1.local\n ├── private\n ├── public\n └── site_config.json\n\napps\n\nThe frappe app and other frappe based apps live in this directory. When you\nrun the command bench new-app app_name, the app will be bootstrapped in this\ndirectory. Your custom apps live here and you are supposed to edit/work with\nthem here.\n\nLearn more about apps.\n\nsites\n\nSites are served from this directory. When you run the command bench new-site\nsite_name, the site will be created in this directory. Sites are distinguished\nbased on their directory name.\n\nLearn more about sites.\n\nlogs\n\nThis directory is used to dump log files from various processes. Each log file\nis named based on the process it is logged from.\n\nconfig\n\nFrappe uses 3 Redis instances to manage caching, job queueing and socketio\ncommunication. All of those configurations live here.\n\nenv\n\nThe Python virtual environment live in this directory. Frappe based apps and\nPython package dependencies are installed here.\n\nProcfile\n\nFrappe uses Procfile based process management. The default Procfile looks\nsomething like this:\n\nredis_cache: redis-server config/redis_cache.conf\nredis_socketio: redis-server config/redis_socketio.conf\nredis_queue: redis-server config/redis_queue.conf\nweb: bench serve --port 8000\n\nsocketio: /usr/bin/node apps/frappe/socketio.js\n\nwatch: bench watch\n\nschedule: bench schedule\nworker_short: bench worker --queue short --quiet\nworker_long: bench worker --queue long --quiet\nworker_default: bench worker --queue default --quiet\n\nLet's see what each process is used for.\n\nredis_cache:\n\nRedis used for in-memory caching.\n\nredis_socketio:\n\nRedis used as a pub/sub between web and socketio processes for realtime communication.\n\nredis_queue:\n\nRedis used for managing background jobs queuing.\n\nweb:\n\nPython web server based on Werkzeug.\n\nsocketio:\n\nNode server for a socketio connection with the browser for realtime communication.\n\nwatch:\n\nNode server for bundling JS/CSS assets using Rollup.\nIt will also rebuild files as they change.\n\nschedule:\n\nJob Scheduler using Python RQ.\n\nworker_short:\n\nPython worker with a (short) timeout of 300s.\n\nworker_long:\n\nPython worker with a (long) timeout of 1500s.\n\nworker_default:\n\nPython worker with a timeout of 300s.",
  "scrapedAt": "2025-10-22T00:01:15.012Z"
}