{
  "route": "framework/user/en/desk/reports/script-report",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/desk/reports/script-report",
  "title": "Anything that can't be achieved using Report Builder or Query Report can be",
  "content": "Anything that can't be achieved using Report Builder or Query Report can be\nachieved using Script Reports. As the name suggests, these reports are built\nusing Python scripts. Since these reports give you unrestricted access via\nPython scripts, they can only be created by Administrators. These reports are\nmeant to be written during development and be a part of your app.\n\n To create Script Reports you must enable Developer Mode.\n\nTo create a Script Report, type \"new report\" in the awesomebar and hit enter.\n\nSet Report Type as \"Script Report\"\nSet \"Is Standard\" as \"Yes\"\nSelect the Module in which you want to add this report\nIn the module folder (for example if it is Accounts in ERPnext the folder\nwill be erpnext/accounts/report/[report-name]) you will see that templates\nfor the report files will be created.\nWrite your python script in the generated {report-name}.py file.\nYou can add filters to your report by adding them to {report-name}.js\n\nNew Script Report\n\nStandard and Custom Reports\n\n Added in Version 12\n\nVerson 12 onwards, you can make custom Query and Script reports in Frappe Framework. In custom reports, the script can be added directy in the Report itself and you can use the Script API functions of Frappe Framework.\n\nColumns and Filters\n\n Added in Version 13\n\nYou can configure the columns and filters in the Report document. Here you can set the label, width, format (fieldtype) for the columns and filters.\n\nFilters can be used as formatting variables in the query. For example a filters of type customer can be used as %(customer)s in the query.\n\nWriting the script\n\nCustom Report\n\nIn custom reports, you can use the Script API and write the script directly in the Code section.\n\nreturn frappe.db.get_all('User', ['first_name', 'last_name'], filters = filters)\n\nStandard Report\n\nThe generated .py file comes with a boilerplate for your report. There is one method named execute which takes filters and returns columns and data. You can use any combination of python modules and SQL queries to generate your report. The execute function looks like this\n\nfrom __future__ import unicode_literals\n# import frappe\n\ndef execute(filters=None):\n columns, data = [], []\n return columns, data\n\nThe execute function is supposed to return the columns and the data to be shown in the report by default. A developer can optionally return a few paramters like message, chart, report_summary, skip_total_rows.\n\nThe following are the parameters that can be returned by the execute function\n\ncolumns\n\nThis is a list of dictionaries. This holds all the columns that are to be displayed in the datatable in an order.\n\nNote: You only need to return columns if you have not specified them in the Report\n\nExample:\n\ncolumns = [\n {\n 'fieldname': 'account',\n 'label': _('Account'),\n 'fieldtype': 'Link',\n 'options': 'Account'\n },\n {\n 'fieldname': 'currency',\n 'label': _('Currency'),\n 'fieldtype': 'Link',\n 'options': 'Currency'\n },\n {\n 'fieldname': 'balance',\n 'label': _('Balance'),\n 'fieldtype': 'Currency',\n 'options': 'currency'\n }\n ]\n\nResults\n\nThis can be a list of lists or a list of dictionaries. This holds the data to be displayed in the report\n\nExample:\n\ndata = [\n {\n 'account': 'Application of Funds (Assets)',\n 'currency': 'INR',\n 'balance': '15182212.738'\n },\n {\n 'account': 'Current Assets - GTPL',\n 'currency': 'INR',\n 'balance': '17117932.738'\n },\n ...\n ]\n\nchart\n\nContains the configuration for the default chart to be shown in the report.\n\nreport_summary\n\nThis is a list of dictionaries that stores the important values in the report and is shown separately in the top section on the UI.\n\nExample:\n\n[{\n \"value\": profit,\n \"indicator\": \"Green\" if profit > 0 else \"Red\",\n \"label\": _(\"Total Profit This Year\"),\n \"datatype\": \"Currency\",\n \"currency\": \"INR\"\n}]\n\n Note: These arguments are supposed to be returned in the specific order as follows\n\nHere is a script report from ERPNext: Balance Sheet\n\nAdding filters\n\nTo add filters in your report define the fields and their fieldtypes in the\n{report-name}.js file. The filter values will be available in the execute\nmethod as a dict.\n\nfrappe.query_reports['Balance Sheet'] = {\n filters: [\n {\n fieldname: 'company',\n label: __('Company'),\n fieldtype: 'Link',\n options: 'Company',\n default: frappe.defaults.get_user_default('company')\n },\n {\n fieldname: 'periodicity',\n label: __('Periodicity'),\n fieldtype: 'Select',\n options: [\n 'Monthly',\n 'Quarterly',\n 'Half-Yearly',\n 'Yearly'\n ],\n default: 'Yearly',\n depends_on: 'eval:doc.company==\"Gadget Technologies Pvt. Ltd.\"'\n }\n ]\n}\n\nSimilar to the depends_on property that controls the display of fields, in\nVersion 13 we have introduced depends_on for Script Report filters. This can\nbe used to determine whether the filter will be visible based on the value of the\ncondition in depends_on.\n\nBalance Sheet\n\n Protip: To navigate directly to a Report of any of the above type, type its\n name in the awesomebar and hit enter.",
  "scrapedAt": "2025-10-22T00:03:45.459Z"
}