{
  "route": "framework/user/en/guides/deployment/migrations",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/guides/deployment/migrations",
  "title": "A project often undergoes changes related to database schema during course of",
  "content": "A project often undergoes changes related to database schema during course of\nits life. It may also be required patch existing data. Frappe bundles tools to\nhandle these scenarios.\n\nWhen you pull updates from any Frappe app (including Frappe), you should run\nbench migrate to apply schema changes and data migrations if any.\n\nSchema changes\n\nYou can edit a DocType to add, remove or change fields. On saving a DocType,\na JSON file containing the DocType data is added to source tree of your app.\nWhen you add an app to a site, the DocTypes are installed using this JSON file.\nFor making schema changes, it's required to set developer_mode in the\nconfiguration.\n\nOn running a sync (bench migrate), doctypes in the system are synced to\ntheir latest version from the JSON files in the app.\n\nNote: Fields are soft deleted ie. the columns are not removed from the database\ntable and however, they will not be visible in the documents. This is done to\navoid any potential data loss situations and to allow you write related data\nmigrations which might need values from deleted fields.\n\nNote: Frappe doesn't support reverse schema migrations.\n\nData Migrations\n\nOn introducing data related changes, you might want to run one off scripts to\nchange existing data to match expectations as per new code.\n\nTo add a data migration to your code, you will have to write an execute\nfunction to a python module and add it to patches.txt of your app.\nAlternatively, you can create a new patch interactively by using following command:\n\n$ bench create-patch\nSelect app for new patch (frappe, hrms, ecommerce_integrations, erpnext): frappe\nProvide DocType name on which this patch will apply: User\nDescribe what this patch does: Improve Indexing\nProvide filename for this patch [improve_indexing.py]:\nPatch folder '/home/ankush/benches/develop/apps/frappe/frappe/core/doctype/user/patches' doesn't exist, create it? [Y/n]: y\nCreated /home/ankush/benches/develop/apps/frappe/frappe/core/doctype/user/patches/improve_indexing.py and updated patches.txt\n\nIt is recommended to make a file with a patch number and name in its path and\nadd it to a patches package (directory) in your app. You can then add a line\nwith dotted path to the patch module to patches.txt.\n\nThe directory structure followed in Frappe is as below\n\nfrappe\n └── patches\n └── 4_0\n └── my_awesome_patch.py\n\nThe patch can be added to patches.txt by adding a line like\n\nfrappe.patches.4_0.my_awesome_patch\n\nThe metadata ie. DocType available in the execute function will be the latest as\nper JSON files in the apps. However, you will not be able to access metadata of\nany previous states of the system.\n\nOne off Python statements\n\nYou can also add one off python statements in patches.txt using the syntax,\n execute:{python statement}\n\nFor example,\n execute:frappe.get_doc(\"User\", \"Guest\").save()\n\nNote: All lines in patches.txt have to be unique. If you want to run a line\ntwice, you can make it unique by adding a distinct comment.\n\nFor Example,\n\nexecute:frappe.installer.make_site_dirs() #2014-02-19",
  "scrapedAt": "2025-10-22T00:02:52.565Z"
}