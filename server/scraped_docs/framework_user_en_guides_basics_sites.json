{
  "route": "framework/user/en/guides/basics/sites",
  "sourceUrl": "https://docs.frappe.io/framework/user/en/guides/basics/sites",
  "title": "Sites Directory",
  "content": "Sites Directory\n\nFrappe is a multitenant platform and each tenant is called a site. Sites exist\nin a directory called sites, assumed as the current working directory when\nrunning a frappe command or other services like Celery worker or a WSGI server.\n\nYou can set sites_dir with an environment variable SITES_DIR or pass\n--sites_dir option to the frappe command.\n\nApart from the sites, the sites_dir should contain the following.\n\napps.txt\n\napps.txt contain a list of Python packages to treat as Frappe apps. Every\nfrappe app that you intend to use in your site should have an entry in this file.\nAlso, they should be in the PYTHONPATH. For more information, refer\nFrappe Apps.\n\ncommon\\site\\config.json\n\ncommon_site_config.json is an optional file. Configuration common to all sites\ncan be put in this file.\n\nassets\n\nAssets contain files that are required to be served for the browser client.\nThese generally include *.js, *.css, *.png files. This directory is auto\ngenerated using the bench build command.\n\nlanguages.txt\n\nlanguages.txt is an autogenerated file which maps every language to it's code.\n\nSite\n\nA site is a directory in sites_dir which represents a tenant in Frappe Platform.\n\nDirectory Structure\n\nsite\n ├── locks\n ├── private\n │   └── backups\n ├── public\n │   └── files\n │ └── testfile.txt\n └── site_config.json\n\nlocks directory is used by the scheduler to synchronize various jobs using\nthe file locking concept.\nprivate directory contains files that require authentication to access.\nPresently, it is limited only to backups.\npublic directory contains files that can directly served. In the above\nexample, testfile.txt can be accessed by the URL,\nhttp://site/files/testfile.txt\nsite_config.json contains site specific configuration\n\nSite Config\n\nSee configuration options for site_config.json\n\nSite Resolution\n\nWhile responding to an HTTP request, a site is automatically selected based on,\n\nHost header in the HTTP request matches a site\nX-Frappe-Site-Name header in the HTTP request matches a site\n\nIt is also possible to force the development server to serve a specific site by\nstarting it with the following command.\n bench --site SITENAME serve\n\nAdding a new site\n\nTo add a new site, execute the following command in your bench instance:\n\nbench new-site SITENAME\n\nSet a site as the current site\n\nTo force a site to be used as the default site, execute the following:\n\nbench use SITENAME\n\nTo make sure, check the contents of currentsite.txt (found in the sites folder of your bench instance) and it should have SITENAME.",
  "scrapedAt": "2025-10-22T00:02:20.078Z"
}